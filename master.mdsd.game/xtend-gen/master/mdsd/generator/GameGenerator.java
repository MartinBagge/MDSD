/**
 * generated by Xtext 2.10.0
 */
package master.mdsd.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.Iterator;
import master.mdsd.game.Action;
import master.mdsd.game.Attack;
import master.mdsd.game.Behaviour;
import master.mdsd.game.Bullet;
import master.mdsd.game.CharDec;
import master.mdsd.game.CharacterAttr;
import master.mdsd.game.CompOperator;
import master.mdsd.game.IntAtt;
import master.mdsd.game.LogicOperatorLoop;
import master.mdsd.game.Pathfinding;
import master.mdsd.game.ReferenceCharacter;
import master.mdsd.game.Rule;
import master.mdsd.game.RuleSet;
import master.mdsd.game.RuleSetup;
import master.mdsd.game.RuleType;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GameGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    CharSequence _addToFile = this.addToFile(resource);
    fsa.generateFile("game.py", _addToFile);
  }
  
  public CharSequence addToFile(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class master(object):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def __init__(self, attrs[]):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.attrs = attrs");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class entity(master):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def set_type(self,type):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.type = type");
    _builder.newLine();
    _builder.newLine();
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<Pathfinding> _filter = Iterators.<Pathfinding>filter(_allContents, Pathfinding.class);
    final Procedure1<Pathfinding> _function = (Pathfinding it) -> {
      this.addPathfinding(it);
    };
    IteratorExtensions.<Pathfinding>forEach(_filter, _function);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence addPathfinding(final Pathfinding pathfinding) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = pathfinding.getName();
    _builder.append(_name, "");
    _builder.append("(entity):");
    _builder.newLineIfNotEmpty();
    {
      EList<RuleSet> _ruleSets = pathfinding.getRuleSets();
      for(final RuleSet ruleSet : _ruleSets) {
        _builder.append("\t");
        _builder.append("def checkCondition():");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("if ");
        Rule _rule = ruleSet.getRule();
        RuleSetup _ruleSetup = _rule.getRuleSetup();
        ReferenceCharacter _attributeRefLeft = _ruleSetup.getAttributeRefLeft();
        _builder.append(_attributeRefLeft, "\t\t");
        _builder.append(".");
        Rule _rule_1 = ruleSet.getRule();
        RuleSetup _ruleSetup_1 = _rule_1.getRuleSetup();
        RuleType _ruleType = _ruleSetup_1.getRuleType();
        _builder.append(_ruleType, "\t\t");
        _builder.append(" ");
        Rule _rule_2 = ruleSet.getRule();
        RuleSetup _ruleSetup_2 = _rule_2.getRuleSetup();
        CompOperator _operator = _ruleSetup_2.getOperator();
        _builder.append(_operator, "\t\t");
        _builder.append(" ");
        Rule _rule_3 = ruleSet.getRule();
        RuleSetup _ruleSetup_3 = _rule_3.getRuleSetup();
        IntAtt _intAttleft = _ruleSetup_3.getIntAttleft();
        _builder.append(_intAttleft, "\t\t");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("self.");
        Rule _rule_4 = ruleSet.getRule();
        Action _toDoAction = _rule_4.getToDoAction();
        CharacterAttr _charAtt = _toDoAction.getCharAtt();
        _builder.append(_charAtt, "\t\t\t");
        _builder.append(" = ");
        Rule _rule_5 = ruleSet.getRule();
        Action _toDoAction_1 = _rule_5.getToDoAction();
        CharDec _charDec = _toDoAction_1.getCharDec();
        _builder.append(_charDec, "\t\t\t");
        Rule _rule_6 = ruleSet.getRule();
        Action _toDoAction_2 = _rule_6.getToDoAction();
        EList<LogicOperatorLoop> _lo = _toDoAction_2.getLo();
        _builder.append(_lo, "\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence addBehaviour(final Behaviour behaviour) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("class ");
    {
      String _behaviourTypeId = behaviour.getBehaviourTypeId();
      boolean _equals = Objects.equal(_behaviourTypeId, "Pathfinding");
      if (_equals) {
        Pathfinding _pathfinding = behaviour.getPathfinding();
        String _name = _pathfinding.getName();
        _builder.append(_name, "");
      } else {
        String _behaviourTypeId_1 = behaviour.getBehaviourTypeId();
        boolean _equals_1 = Objects.equal(_behaviourTypeId_1, "Attack");
        if (_equals_1) {
          Attack _attack = behaviour.getAttack();
          String _name_1 = _attack.getName();
          _builder.append(_name_1, "");
        } else {
          String _behaviourTypeId_2 = behaviour.getBehaviourTypeId();
          boolean _equals_2 = Objects.equal(_behaviourTypeId_2, "Bullet");
          if (_equals_2) {
            Bullet _bullet = behaviour.getBullet();
            String _name_2 = _bullet.getName();
            _builder.append(_name_2, "");
          }
        }
      }
    }
    _builder.append("(entity):");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("def ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addCharacter(final master.mdsd.game.Character character) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = character.getName();
    _builder.append(_name, "");
    _builder.append("(entity):");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
