/**
 * generated by Xtext 2.10.0
 */
package master.mdsd.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.Iterator;
import master.mdsd.game.Attack;
import master.mdsd.game.Behaviour;
import master.mdsd.game.Bullet;
import master.mdsd.game.Pathfinding;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GameGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    CharSequence _addToFile = this.addToFile(resource);
    fsa.generateFile("master.py", _addToFile);
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<master.mdsd.game.Character> _filter = Iterators.<master.mdsd.game.Character>filter(_allContents, master.mdsd.game.Character.class);
    final Procedure1<master.mdsd.game.Character> _function = (master.mdsd.game.Character it) -> {
      this.createCharacter(it, fsa);
    };
    IteratorExtensions.<master.mdsd.game.Character>forEach(_filter, _function);
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterator<Behaviour> _filter_1 = Iterators.<Behaviour>filter(_allContents_1, Behaviour.class);
    final Procedure1<Behaviour> _function_1 = (Behaviour it) -> {
      this.createBehaviour(it, fsa);
    };
    IteratorExtensions.<Behaviour>forEach(_filter_1, _function_1);
    TreeIterator<EObject> _allContents_2 = resource.getAllContents();
    Iterator<master.mdsd.game.Object> _filter_2 = Iterators.<master.mdsd.game.Object>filter(_allContents_2, master.mdsd.game.Object.class);
    final Procedure1<master.mdsd.game.Object> _function_2 = (master.mdsd.game.Object it) -> {
      this.createObject(it, fsa);
    };
    IteratorExtensions.<master.mdsd.game.Object>forEach(_filter_2, _function_2);
  }
  
  public void createObject(final master.mdsd.game.Object object, final IFileSystemAccess2 fsa) {
    String _name = object.getName();
    String _plus = (_name + ".py");
    CharSequence _ObjectTemp = this.ObjectTemp(object);
    fsa.generateFile(_plus, _ObjectTemp);
  }
  
  public CharSequence ObjectTemp(final master.mdsd.game.Object object) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import master");
    _builder.newLine();
    _builder.append("class ");
    String _name = object.getName();
    _builder.append(_name, "");
    _builder.append("(entity):");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public Object createBehaviour(final Behaviour behaviour, final IFileSystemAccess2 fsa) {
    return null;
  }
  
  public void BehaviourTemp(final Behaviour behaviour) {
    throw new UnsupportedOperationException("TODO: auto-generated method stub");
  }
  
  public void createCharacter(final master.mdsd.game.Character character, final IFileSystemAccess2 fsa) {
    String _name = character.getName();
    String _plus = (_name + ".py");
    CharSequence _characterTemp = this.characterTemp(character);
    fsa.generateFile(_plus, _characterTemp);
  }
  
  public CharSequence characterTemp(final master.mdsd.game.Character character) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import master");
    _builder.newLine();
    _builder.append("class ");
    String _name = character.getName();
    _builder.append(_name, "");
    _builder.append("(entity):");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addToFile(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class master(object):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def __init__(self, attrs):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.attrs = attrs");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class entity(master):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def set_type(self,type):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.type = type");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addPathfinding(final Pathfinding pathfinding) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = pathfinding.getName();
    _builder.append(_name, "");
    _builder.append("(entity):");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addBehaviour(final Behaviour behaviour) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("class ");
    {
      String _behaviourTypeId = behaviour.getBehaviourTypeId();
      boolean _equals = Objects.equal(_behaviourTypeId, "Pathfinding");
      if (_equals) {
        Pathfinding _pathfinding = behaviour.getPathfinding();
        String _name = _pathfinding.getName();
        _builder.append(_name, "");
      } else {
        String _behaviourTypeId_1 = behaviour.getBehaviourTypeId();
        boolean _equals_1 = Objects.equal(_behaviourTypeId_1, "Attack");
        if (_equals_1) {
          Attack _attack = behaviour.getAttack();
          String _name_1 = _attack.getName();
          _builder.append(_name_1, "");
        } else {
          String _behaviourTypeId_2 = behaviour.getBehaviourTypeId();
          boolean _equals_2 = Objects.equal(_behaviourTypeId_2, "Bullet");
          if (_equals_2) {
            Bullet _bullet = behaviour.getBullet();
            String _name_2 = _bullet.getName();
            _builder.append(_name_2, "");
          }
        }
      }
    }
    _builder.append("(entity):");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("def ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addCharacter(final master.mdsd.game.Character character) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = character.getName();
    _builder.append(_name, "");
    _builder.append("(entity):");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
