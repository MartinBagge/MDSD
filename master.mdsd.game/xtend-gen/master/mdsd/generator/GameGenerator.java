/**
 * generated by Xtext 2.10.0
 */
package master.mdsd.generator;

import com.google.common.collect.Iterators;
import java.util.Iterator;
import master.mdsd.game.Attack;
import master.mdsd.game.Bullet;
import master.mdsd.game.Pathfinding;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GameGenerator extends AbstractGenerator {
  private CharSequence all;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.createAll(resource);
    fsa.generateFile("game.py", this.all);
  }
  
  public CharSequence createAll(final Resource resource) {
    CharSequence _xblockexpression = null;
    {
      CharSequence _addMaster = this.addMaster();
      this.all = _addMaster;
      TreeIterator<EObject> _allContents = resource.getAllContents();
      Iterator<master.mdsd.game.Character> _filter = Iterators.<master.mdsd.game.Character>filter(_allContents, master.mdsd.game.Character.class);
      final Procedure1<master.mdsd.game.Character> _function = (master.mdsd.game.Character it) -> {
        this.createCharacter(it);
      };
      IteratorExtensions.<master.mdsd.game.Character>forEach(_filter, _function);
      TreeIterator<EObject> _allContents_1 = resource.getAllContents();
      Iterator<master.mdsd.game.Object> _filter_1 = Iterators.<master.mdsd.game.Object>filter(_allContents_1, master.mdsd.game.Object.class);
      final Procedure1<master.mdsd.game.Object> _function_1 = (master.mdsd.game.Object it) -> {
        this.createObject(it);
      };
      IteratorExtensions.<master.mdsd.game.Object>forEach(_filter_1, _function_1);
      TreeIterator<EObject> _allContents_2 = resource.getAllContents();
      Iterator<Pathfinding> _filter_2 = Iterators.<Pathfinding>filter(_allContents_2, Pathfinding.class);
      final Procedure1<Pathfinding> _function_2 = (Pathfinding it) -> {
        this.createPathfinding(it);
      };
      IteratorExtensions.<Pathfinding>forEach(_filter_2, _function_2);
      TreeIterator<EObject> _allContents_3 = resource.getAllContents();
      Iterator<Attack> _filter_3 = Iterators.<Attack>filter(_allContents_3, Attack.class);
      final Procedure1<Attack> _function_3 = (Attack it) -> {
        this.createAttack(it);
      };
      IteratorExtensions.<Attack>forEach(_filter_3, _function_3);
      TreeIterator<EObject> _allContents_4 = resource.getAllContents();
      Iterator<Bullet> _filter_4 = Iterators.<Bullet>filter(_allContents_4, Bullet.class);
      final Procedure1<Bullet> _function_4 = (Bullet it) -> {
        this.createBullet(it);
      };
      IteratorExtensions.<Bullet>forEach(_filter_4, _function_4);
      String _string = this.all.toString();
      CharSequence _addScript = this.addScript();
      String _plus = (_string + _addScript);
      _xblockexpression = this.all = _plus;
    }
    return _xblockexpression;
  }
  
  public CharSequence createPathfinding(final Pathfinding pathfinding) {
    String _string = this.all.toString();
    CharSequence _addPathfinding = this.addPathfinding(pathfinding);
    String _plus = (_string + _addPathfinding);
    return this.all = _plus;
  }
  
  public CharSequence createAttack(final Attack attack) {
    String _string = this.all.toString();
    CharSequence _addAttack = this.addAttack(attack);
    String _plus = (_string + _addAttack);
    return this.all = _plus;
  }
  
  public CharSequence createBullet(final Bullet bullet) {
    String _string = this.all.toString();
    CharSequence _addBullet = this.addBullet(bullet);
    String _plus = (_string + _addBullet);
    return this.all = _plus;
  }
  
  public CharSequence createCharacter(final master.mdsd.game.Character character) {
    String _string = this.all.toString();
    CharSequence _addCharacter = this.addCharacter(character);
    String _plus = (_string + _addCharacter);
    return this.all = _plus;
  }
  
  public CharSequence createObject(final master.mdsd.game.Object object) {
    String _string = this.all.toString();
    CharSequence _addObject = this.addObject(object);
    String _plus = (_string + _addObject);
    return this.all = _plus;
  }
  
  public CharSequence addMaster() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class master(object):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def __init__(self, attrs):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.attrs = attrs");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class entity(master):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def set_type(self,type):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.type = type");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addPathfinding(final Pathfinding pathfinding) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = pathfinding.getName();
    _builder.append(_name, "");
    _builder.append("(entity):");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addAttack(final Attack attack) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = attack.getName();
    _builder.append(_name, "");
    _builder.append("(entity):");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addBullet(final Bullet bullet) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = bullet.getName();
    _builder.append(_name, "");
    _builder.append("(entity)>");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addCharacter(final master.mdsd.game.Character character) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = character.getName();
    _builder.append(_name, "");
    _builder.append("(entity):");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addObject(final master.mdsd.game.Object object) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = object.getName();
    _builder.append(_name, "");
    _builder.append("(entity):");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addScript() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.newLine();
    return _builder;
  }
}
