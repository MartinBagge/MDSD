/**
 * generated by Xtext 2.10.0
 */
package master.mdsd.game.util;

import master.mdsd.game.A;
import master.mdsd.game.Action;
import master.mdsd.game.Ammo;
import master.mdsd.game.AttS;
import master.mdsd.game.Attack;
import master.mdsd.game.Attribute;
import master.mdsd.game.AttributeAttack;
import master.mdsd.game.AttributeInitializer;
import master.mdsd.game.AttributeTypeAttack;
import master.mdsd.game.Behaviour;
import master.mdsd.game.BooleanExpression;
import master.mdsd.game.Bullet;
import master.mdsd.game.CharDec;
import master.mdsd.game.CharType;
import master.mdsd.game.CharacterAttr;
import master.mdsd.game.CompOperator;
import master.mdsd.game.Condition;
import master.mdsd.game.D;
import master.mdsd.game.DynamicEntity;
import master.mdsd.game.EQ;
import master.mdsd.game.Entity;
import master.mdsd.game.Expression;
import master.mdsd.game.GT;
import master.mdsd.game.GTE;
import master.mdsd.game.GameMap;
import master.mdsd.game.GamePackage;
import master.mdsd.game.Initializer;
import master.mdsd.game.IntLiteral;
import master.mdsd.game.LT;
import master.mdsd.game.LTE;
import master.mdsd.game.Location;
import master.mdsd.game.LogicOperator;
import master.mdsd.game.M;
import master.mdsd.game.Model;
import master.mdsd.game.Operation;
import master.mdsd.game.Pathfinding;
import master.mdsd.game.ReferenceCharacter;
import master.mdsd.game.StaticEntity;
import master.mdsd.game.T;
import master.mdsd.game.TargetRef;
import master.mdsd.game.Type;
import master.mdsd.game.VECTOR;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see master.mdsd.game.GamePackage
 * @generated
 */
public class GameAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GamePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = GamePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GameSwitch<Adapter> modelSwitch =
    new GameSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseGameMap(GameMap object)
      {
        return createGameMapAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseDynamicEntity(DynamicEntity object)
      {
        return createDynamicEntityAdapter();
      }
      @Override
      public Adapter caseStaticEntity(StaticEntity object)
      {
        return createStaticEntityAdapter();
      }
      @Override
      public Adapter caseCharacter(master.mdsd.game.Character object)
      {
        return createCharacterAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseVECTOR(VECTOR object)
      {
        return createVECTORAdapter();
      }
      @Override
      public Adapter caseCharType(CharType object)
      {
        return createCharTypeAdapter();
      }
      @Override
      public Adapter caseObject(master.mdsd.game.Object object)
      {
        return createObjectAdapter();
      }
      @Override
      public Adapter caseBehaviour(Behaviour object)
      {
        return createBehaviourAdapter();
      }
      @Override
      public Adapter casePathfinding(Pathfinding object)
      {
        return createPathfindingAdapter();
      }
      @Override
      public Adapter caseBooleanExpression(BooleanExpression object)
      {
        return createBooleanExpressionAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseReferenceCharacter(ReferenceCharacter object)
      {
        return createReferenceCharacterAdapter();
      }
      @Override
      public Adapter caseCompOperator(CompOperator object)
      {
        return createCompOperatorAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseCharDec(CharDec object)
      {
        return createCharDecAdapter();
      }
      @Override
      public Adapter caseCharacterAttr(CharacterAttr object)
      {
        return createCharacterAttrAdapter();
      }
      @Override
      public Adapter caseLogicOperator(LogicOperator object)
      {
        return createLogicOperatorAdapter();
      }
      @Override
      public Adapter caseAttack(Attack object)
      {
        return createAttackAdapter();
      }
      @Override
      public Adapter caseAttributeAttack(AttributeAttack object)
      {
        return createAttributeAttackAdapter();
      }
      @Override
      public Adapter caseAttributeTypeAttack(AttributeTypeAttack object)
      {
        return createAttributeTypeAttackAdapter();
      }
      @Override
      public Adapter caseBullet(Bullet object)
      {
        return createBulletAdapter();
      }
      @Override
      public Adapter caseInitializer(Initializer object)
      {
        return createInitializerAdapter();
      }
      @Override
      public Adapter caseAttributeInitializer(AttributeInitializer object)
      {
        return createAttributeInitializerAdapter();
      }
      @Override
      public Adapter caseTargetRef(TargetRef object)
      {
        return createTargetRefAdapter();
      }
      @Override
      public Adapter caseLocation(Location object)
      {
        return createLocationAdapter();
      }
      @Override
      public Adapter caseOperation(Operation object)
      {
        return createOperationAdapter();
      }
      @Override
      public Adapter caseIntLiteral(IntLiteral object)
      {
        return createIntLiteralAdapter();
      }
      @Override
      public Adapter caseLT(LT object)
      {
        return createLTAdapter();
      }
      @Override
      public Adapter caseGT(GT object)
      {
        return createGTAdapter();
      }
      @Override
      public Adapter caseLTE(LTE object)
      {
        return createLTEAdapter();
      }
      @Override
      public Adapter caseGTE(GTE object)
      {
        return createGTEAdapter();
      }
      @Override
      public Adapter caseEQ(EQ object)
      {
        return createEQAdapter();
      }
      @Override
      public Adapter caseT(T object)
      {
        return createTAdapter();
      }
      @Override
      public Adapter caseA(A object)
      {
        return createAAdapter();
      }
      @Override
      public Adapter caseM(M object)
      {
        return createMAdapter();
      }
      @Override
      public Adapter caseD(D object)
      {
        return createDAdapter();
      }
      @Override
      public Adapter caseAmmo(Ammo object)
      {
        return createAmmoAdapter();
      }
      @Override
      public Adapter caseAttS(AttS object)
      {
        return createAttSAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.GameMap <em>Map</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.GameMap
   * @generated
   */
  public Adapter createGameMapAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.DynamicEntity <em>Dynamic Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.DynamicEntity
   * @generated
   */
  public Adapter createDynamicEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.StaticEntity <em>Static Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.StaticEntity
   * @generated
   */
  public Adapter createStaticEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Character <em>Character</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Character
   * @generated
   */
  public Adapter createCharacterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.VECTOR <em>VECTOR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.VECTOR
   * @generated
   */
  public Adapter createVECTORAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.CharType <em>Char Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.CharType
   * @generated
   */
  public Adapter createCharTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Object <em>Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Object
   * @generated
   */
  public Adapter createObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Behaviour <em>Behaviour</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Behaviour
   * @generated
   */
  public Adapter createBehaviourAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Pathfinding <em>Pathfinding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Pathfinding
   * @generated
   */
  public Adapter createPathfindingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.BooleanExpression <em>Boolean Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.BooleanExpression
   * @generated
   */
  public Adapter createBooleanExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.ReferenceCharacter <em>Reference Character</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.ReferenceCharacter
   * @generated
   */
  public Adapter createReferenceCharacterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.CompOperator <em>Comp Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.CompOperator
   * @generated
   */
  public Adapter createCompOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.CharDec <em>Char Dec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.CharDec
   * @generated
   */
  public Adapter createCharDecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.CharacterAttr <em>Character Attr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.CharacterAttr
   * @generated
   */
  public Adapter createCharacterAttrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.LogicOperator <em>Logic Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.LogicOperator
   * @generated
   */
  public Adapter createLogicOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Attack <em>Attack</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Attack
   * @generated
   */
  public Adapter createAttackAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.AttributeAttack <em>Attribute Attack</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.AttributeAttack
   * @generated
   */
  public Adapter createAttributeAttackAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.AttributeTypeAttack <em>Attribute Type Attack</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.AttributeTypeAttack
   * @generated
   */
  public Adapter createAttributeTypeAttackAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Bullet <em>Bullet</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Bullet
   * @generated
   */
  public Adapter createBulletAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Initializer <em>Initializer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Initializer
   * @generated
   */
  public Adapter createInitializerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.AttributeInitializer <em>Attribute Initializer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.AttributeInitializer
   * @generated
   */
  public Adapter createAttributeInitializerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.TargetRef <em>Target Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.TargetRef
   * @generated
   */
  public Adapter createTargetRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Location <em>Location</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Location
   * @generated
   */
  public Adapter createLocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Operation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Operation
   * @generated
   */
  public Adapter createOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.IntLiteral <em>Int Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.IntLiteral
   * @generated
   */
  public Adapter createIntLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.LT <em>LT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.LT
   * @generated
   */
  public Adapter createLTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.GT <em>GT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.GT
   * @generated
   */
  public Adapter createGTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.LTE <em>LTE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.LTE
   * @generated
   */
  public Adapter createLTEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.GTE <em>GTE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.GTE
   * @generated
   */
  public Adapter createGTEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.EQ <em>EQ</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.EQ
   * @generated
   */
  public Adapter createEQAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.T <em>T</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.T
   * @generated
   */
  public Adapter createTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.A <em>A</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.A
   * @generated
   */
  public Adapter createAAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.M <em>M</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.M
   * @generated
   */
  public Adapter createMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.D <em>D</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.D
   * @generated
   */
  public Adapter createDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.Ammo <em>Ammo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.Ammo
   * @generated
   */
  public Adapter createAmmoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link master.mdsd.game.AttS <em>Att S</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see master.mdsd.game.AttS
   * @generated
   */
  public Adapter createAttSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //GameAdapterFactory
