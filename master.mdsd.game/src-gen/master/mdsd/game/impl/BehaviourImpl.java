/**
 * generated by Xtext 2.10.0
 */
package master.mdsd.game.impl;

import master.mdsd.game.Attack;
import master.mdsd.game.Behaviour;
import master.mdsd.game.Bullet;
import master.mdsd.game.GamePackage;
import master.mdsd.game.Pathfinding;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Behaviour</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link master.mdsd.game.impl.BehaviourImpl#getBehaviourTypeId <em>Behaviour Type Id</em>}</li>
 *   <li>{@link master.mdsd.game.impl.BehaviourImpl#getPathfinding <em>Pathfinding</em>}</li>
 *   <li>{@link master.mdsd.game.impl.BehaviourImpl#getAttack <em>Attack</em>}</li>
 *   <li>{@link master.mdsd.game.impl.BehaviourImpl#getBullet <em>Bullet</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BehaviourImpl extends MinimalEObjectImpl.Container implements Behaviour
{
  /**
   * The default value of the '{@link #getBehaviourTypeId() <em>Behaviour Type Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBehaviourTypeId()
   * @generated
   * @ordered
   */
  protected static final String BEHAVIOUR_TYPE_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBehaviourTypeId() <em>Behaviour Type Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBehaviourTypeId()
   * @generated
   * @ordered
   */
  protected String behaviourTypeId = BEHAVIOUR_TYPE_ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getPathfinding() <em>Pathfinding</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPathfinding()
   * @generated
   * @ordered
   */
  protected Pathfinding pathfinding;

  /**
   * The cached value of the '{@link #getAttack() <em>Attack</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttack()
   * @generated
   * @ordered
   */
  protected Attack attack;

  /**
   * The cached value of the '{@link #getBullet() <em>Bullet</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBullet()
   * @generated
   * @ordered
   */
  protected Bullet bullet;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BehaviourImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GamePackage.Literals.BEHAVIOUR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getBehaviourTypeId()
  {
    return behaviourTypeId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBehaviourTypeId(String newBehaviourTypeId)
  {
    String oldBehaviourTypeId = behaviourTypeId;
    behaviourTypeId = newBehaviourTypeId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.BEHAVIOUR__BEHAVIOUR_TYPE_ID, oldBehaviourTypeId, behaviourTypeId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pathfinding getPathfinding()
  {
    return pathfinding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPathfinding(Pathfinding newPathfinding, NotificationChain msgs)
  {
    Pathfinding oldPathfinding = pathfinding;
    pathfinding = newPathfinding;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.BEHAVIOUR__PATHFINDING, oldPathfinding, newPathfinding);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPathfinding(Pathfinding newPathfinding)
  {
    if (newPathfinding != pathfinding)
    {
      NotificationChain msgs = null;
      if (pathfinding != null)
        msgs = ((InternalEObject)pathfinding).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.BEHAVIOUR__PATHFINDING, null, msgs);
      if (newPathfinding != null)
        msgs = ((InternalEObject)newPathfinding).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.BEHAVIOUR__PATHFINDING, null, msgs);
      msgs = basicSetPathfinding(newPathfinding, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.BEHAVIOUR__PATHFINDING, newPathfinding, newPathfinding));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attack getAttack()
  {
    return attack;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAttack(Attack newAttack, NotificationChain msgs)
  {
    Attack oldAttack = attack;
    attack = newAttack;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.BEHAVIOUR__ATTACK, oldAttack, newAttack);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAttack(Attack newAttack)
  {
    if (newAttack != attack)
    {
      NotificationChain msgs = null;
      if (attack != null)
        msgs = ((InternalEObject)attack).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.BEHAVIOUR__ATTACK, null, msgs);
      if (newAttack != null)
        msgs = ((InternalEObject)newAttack).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.BEHAVIOUR__ATTACK, null, msgs);
      msgs = basicSetAttack(newAttack, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.BEHAVIOUR__ATTACK, newAttack, newAttack));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bullet getBullet()
  {
    return bullet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBullet(Bullet newBullet, NotificationChain msgs)
  {
    Bullet oldBullet = bullet;
    bullet = newBullet;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.BEHAVIOUR__BULLET, oldBullet, newBullet);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBullet(Bullet newBullet)
  {
    if (newBullet != bullet)
    {
      NotificationChain msgs = null;
      if (bullet != null)
        msgs = ((InternalEObject)bullet).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.BEHAVIOUR__BULLET, null, msgs);
      if (newBullet != null)
        msgs = ((InternalEObject)newBullet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.BEHAVIOUR__BULLET, null, msgs);
      msgs = basicSetBullet(newBullet, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.BEHAVIOUR__BULLET, newBullet, newBullet));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GamePackage.BEHAVIOUR__PATHFINDING:
        return basicSetPathfinding(null, msgs);
      case GamePackage.BEHAVIOUR__ATTACK:
        return basicSetAttack(null, msgs);
      case GamePackage.BEHAVIOUR__BULLET:
        return basicSetBullet(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GamePackage.BEHAVIOUR__BEHAVIOUR_TYPE_ID:
        return getBehaviourTypeId();
      case GamePackage.BEHAVIOUR__PATHFINDING:
        return getPathfinding();
      case GamePackage.BEHAVIOUR__ATTACK:
        return getAttack();
      case GamePackage.BEHAVIOUR__BULLET:
        return getBullet();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GamePackage.BEHAVIOUR__BEHAVIOUR_TYPE_ID:
        setBehaviourTypeId((String)newValue);
        return;
      case GamePackage.BEHAVIOUR__PATHFINDING:
        setPathfinding((Pathfinding)newValue);
        return;
      case GamePackage.BEHAVIOUR__ATTACK:
        setAttack((Attack)newValue);
        return;
      case GamePackage.BEHAVIOUR__BULLET:
        setBullet((Bullet)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.BEHAVIOUR__BEHAVIOUR_TYPE_ID:
        setBehaviourTypeId(BEHAVIOUR_TYPE_ID_EDEFAULT);
        return;
      case GamePackage.BEHAVIOUR__PATHFINDING:
        setPathfinding((Pathfinding)null);
        return;
      case GamePackage.BEHAVIOUR__ATTACK:
        setAttack((Attack)null);
        return;
      case GamePackage.BEHAVIOUR__BULLET:
        setBullet((Bullet)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.BEHAVIOUR__BEHAVIOUR_TYPE_ID:
        return BEHAVIOUR_TYPE_ID_EDEFAULT == null ? behaviourTypeId != null : !BEHAVIOUR_TYPE_ID_EDEFAULT.equals(behaviourTypeId);
      case GamePackage.BEHAVIOUR__PATHFINDING:
        return pathfinding != null;
      case GamePackage.BEHAVIOUR__ATTACK:
        return attack != null;
      case GamePackage.BEHAVIOUR__BULLET:
        return bullet != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (behaviourTypeId: ");
    result.append(behaviourTypeId);
    result.append(')');
    return result.toString();
  }

} //BehaviourImpl
