/**
 * generated by Xtext 2.10.0
 */
package master.mdsd.game.impl;

import master.mdsd.game.GamePackage;
import master.mdsd.game.RuleType;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rule Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link master.mdsd.game.impl.RuleTypeImpl#getRuleTypeId <em>Rule Type Id</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RuleTypeImpl extends MinimalEObjectImpl.Container implements RuleType
{
  /**
   * The default value of the '{@link #getRuleTypeId() <em>Rule Type Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRuleTypeId()
   * @generated
   * @ordered
   */
  protected static final String RULE_TYPE_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRuleTypeId() <em>Rule Type Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRuleTypeId()
   * @generated
   * @ordered
   */
  protected String ruleTypeId = RULE_TYPE_ID_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RuleTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GamePackage.Literals.RULE_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getRuleTypeId()
  {
    return ruleTypeId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRuleTypeId(String newRuleTypeId)
  {
    String oldRuleTypeId = ruleTypeId;
    ruleTypeId = newRuleTypeId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.RULE_TYPE__RULE_TYPE_ID, oldRuleTypeId, ruleTypeId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GamePackage.RULE_TYPE__RULE_TYPE_ID:
        return getRuleTypeId();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GamePackage.RULE_TYPE__RULE_TYPE_ID:
        setRuleTypeId((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.RULE_TYPE__RULE_TYPE_ID:
        setRuleTypeId(RULE_TYPE_ID_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.RULE_TYPE__RULE_TYPE_ID:
        return RULE_TYPE_ID_EDEFAULT == null ? ruleTypeId != null : !RULE_TYPE_ID_EDEFAULT.equals(ruleTypeId);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (ruleTypeId: ");
    result.append(ruleTypeId);
    result.append(')');
    return result.toString();
  }

} //RuleTypeImpl
