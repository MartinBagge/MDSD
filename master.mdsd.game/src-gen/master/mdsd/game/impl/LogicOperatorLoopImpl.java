/**
 * generated by Xtext 2.10.0
 */
package master.mdsd.game.impl;

import java.util.Collection;

import master.mdsd.game.GamePackage;
import master.mdsd.game.IntAtt;
import master.mdsd.game.LogicOperator;
import master.mdsd.game.LogicOperatorLoop;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Logic Operator Loop</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link master.mdsd.game.impl.LogicOperatorLoopImpl#getLogicOp <em>Logic Op</em>}</li>
 *   <li>{@link master.mdsd.game.impl.LogicOperatorLoopImpl#getIntAtt <em>Int Att</em>}</li>
 *   <li>{@link master.mdsd.game.impl.LogicOperatorLoopImpl#getLop <em>Lop</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LogicOperatorLoopImpl extends MinimalEObjectImpl.Container implements LogicOperatorLoop
{
  /**
   * The cached value of the '{@link #getLogicOp() <em>Logic Op</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogicOp()
   * @generated
   * @ordered
   */
  protected EList<LogicOperator> logicOp;

  /**
   * The cached value of the '{@link #getIntAtt() <em>Int Att</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIntAtt()
   * @generated
   * @ordered
   */
  protected EList<IntAtt> intAtt;

  /**
   * The cached value of the '{@link #getLop() <em>Lop</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLop()
   * @generated
   * @ordered
   */
  protected EList<LogicOperatorLoop> lop;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LogicOperatorLoopImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GamePackage.Literals.LOGIC_OPERATOR_LOOP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<LogicOperator> getLogicOp()
  {
    if (logicOp == null)
    {
      logicOp = new EObjectContainmentEList<LogicOperator>(LogicOperator.class, this, GamePackage.LOGIC_OPERATOR_LOOP__LOGIC_OP);
    }
    return logicOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<IntAtt> getIntAtt()
  {
    if (intAtt == null)
    {
      intAtt = new EObjectContainmentEList<IntAtt>(IntAtt.class, this, GamePackage.LOGIC_OPERATOR_LOOP__INT_ATT);
    }
    return intAtt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<LogicOperatorLoop> getLop()
  {
    if (lop == null)
    {
      lop = new EObjectContainmentEList<LogicOperatorLoop>(LogicOperatorLoop.class, this, GamePackage.LOGIC_OPERATOR_LOOP__LOP);
    }
    return lop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GamePackage.LOGIC_OPERATOR_LOOP__LOGIC_OP:
        return ((InternalEList<?>)getLogicOp()).basicRemove(otherEnd, msgs);
      case GamePackage.LOGIC_OPERATOR_LOOP__INT_ATT:
        return ((InternalEList<?>)getIntAtt()).basicRemove(otherEnd, msgs);
      case GamePackage.LOGIC_OPERATOR_LOOP__LOP:
        return ((InternalEList<?>)getLop()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GamePackage.LOGIC_OPERATOR_LOOP__LOGIC_OP:
        return getLogicOp();
      case GamePackage.LOGIC_OPERATOR_LOOP__INT_ATT:
        return getIntAtt();
      case GamePackage.LOGIC_OPERATOR_LOOP__LOP:
        return getLop();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GamePackage.LOGIC_OPERATOR_LOOP__LOGIC_OP:
        getLogicOp().clear();
        getLogicOp().addAll((Collection<? extends LogicOperator>)newValue);
        return;
      case GamePackage.LOGIC_OPERATOR_LOOP__INT_ATT:
        getIntAtt().clear();
        getIntAtt().addAll((Collection<? extends IntAtt>)newValue);
        return;
      case GamePackage.LOGIC_OPERATOR_LOOP__LOP:
        getLop().clear();
        getLop().addAll((Collection<? extends LogicOperatorLoop>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.LOGIC_OPERATOR_LOOP__LOGIC_OP:
        getLogicOp().clear();
        return;
      case GamePackage.LOGIC_OPERATOR_LOOP__INT_ATT:
        getIntAtt().clear();
        return;
      case GamePackage.LOGIC_OPERATOR_LOOP__LOP:
        getLop().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.LOGIC_OPERATOR_LOOP__LOGIC_OP:
        return logicOp != null && !logicOp.isEmpty();
      case GamePackage.LOGIC_OPERATOR_LOOP__INT_ATT:
        return intAtt != null && !intAtt.isEmpty();
      case GamePackage.LOGIC_OPERATOR_LOOP__LOP:
        return lop != null && !lop.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //LogicOperatorLoopImpl
