/**
 * generated by Xtext 2.10.0
 */
package master.mdsd.game.impl;

import java.util.Collection;

import master.mdsd.game.Attribute;
import master.mdsd.game.GamePackage;
import master.mdsd.game.Pathfinding;
import master.mdsd.game.RuleSet;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pathfinding</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link master.mdsd.game.impl.PathfindingImpl#getName <em>Name</em>}</li>
 *   <li>{@link master.mdsd.game.impl.PathfindingImpl#getAttPathfinding <em>Att Pathfinding</em>}</li>
 *   <li>{@link master.mdsd.game.impl.PathfindingImpl#getRuleSets <em>Rule Sets</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PathfindingImpl extends MinimalEObjectImpl.Container implements Pathfinding
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getAttPathfinding() <em>Att Pathfinding</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttPathfinding()
   * @generated
   * @ordered
   */
  protected EList<Attribute> attPathfinding;

  /**
   * The cached value of the '{@link #getRuleSets() <em>Rule Sets</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRuleSets()
   * @generated
   * @ordered
   */
  protected EList<RuleSet> ruleSets;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PathfindingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GamePackage.Literals.PATHFINDING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.PATHFINDING__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Attribute> getAttPathfinding()
  {
    if (attPathfinding == null)
    {
      attPathfinding = new EObjectContainmentEList<Attribute>(Attribute.class, this, GamePackage.PATHFINDING__ATT_PATHFINDING);
    }
    return attPathfinding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<RuleSet> getRuleSets()
  {
    if (ruleSets == null)
    {
      ruleSets = new EObjectContainmentEList<RuleSet>(RuleSet.class, this, GamePackage.PATHFINDING__RULE_SETS);
    }
    return ruleSets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GamePackage.PATHFINDING__ATT_PATHFINDING:
        return ((InternalEList<?>)getAttPathfinding()).basicRemove(otherEnd, msgs);
      case GamePackage.PATHFINDING__RULE_SETS:
        return ((InternalEList<?>)getRuleSets()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GamePackage.PATHFINDING__NAME:
        return getName();
      case GamePackage.PATHFINDING__ATT_PATHFINDING:
        return getAttPathfinding();
      case GamePackage.PATHFINDING__RULE_SETS:
        return getRuleSets();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GamePackage.PATHFINDING__NAME:
        setName((String)newValue);
        return;
      case GamePackage.PATHFINDING__ATT_PATHFINDING:
        getAttPathfinding().clear();
        getAttPathfinding().addAll((Collection<? extends Attribute>)newValue);
        return;
      case GamePackage.PATHFINDING__RULE_SETS:
        getRuleSets().clear();
        getRuleSets().addAll((Collection<? extends RuleSet>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.PATHFINDING__NAME:
        setName(NAME_EDEFAULT);
        return;
      case GamePackage.PATHFINDING__ATT_PATHFINDING:
        getAttPathfinding().clear();
        return;
      case GamePackage.PATHFINDING__RULE_SETS:
        getRuleSets().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.PATHFINDING__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case GamePackage.PATHFINDING__ATT_PATHFINDING:
        return attPathfinding != null && !attPathfinding.isEmpty();
      case GamePackage.PATHFINDING__RULE_SETS:
        return ruleSets != null && !ruleSets.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //PathfindingImpl
