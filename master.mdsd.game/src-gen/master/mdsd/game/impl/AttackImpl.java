/**
 * generated by Xtext 2.10.0
 */
package master.mdsd.game.impl;

import java.util.Collection;

import master.mdsd.game.Attack;
import master.mdsd.game.Attribute;
import master.mdsd.game.AttributeAttack;
import master.mdsd.game.GamePackage;
import master.mdsd.game.RuleSet;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Attack</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link master.mdsd.game.impl.AttackImpl#getName <em>Name</em>}</li>
 *   <li>{@link master.mdsd.game.impl.AttackImpl#getAttributes <em>Attributes</em>}</li>
 *   <li>{@link master.mdsd.game.impl.AttackImpl#getAttributesAttack <em>Attributes Attack</em>}</li>
 *   <li>{@link master.mdsd.game.impl.AttackImpl#getRules <em>Rules</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AttackImpl extends MinimalEObjectImpl.Container implements Attack
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributes()
   * @generated
   * @ordered
   */
  protected EList<Attribute> attributes;

  /**
   * The cached value of the '{@link #getAttributesAttack() <em>Attributes Attack</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributesAttack()
   * @generated
   * @ordered
   */
  protected EList<AttributeAttack> attributesAttack;

  /**
   * The cached value of the '{@link #getRules() <em>Rules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRules()
   * @generated
   * @ordered
   */
  protected EList<RuleSet> rules;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AttackImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GamePackage.Literals.ATTACK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.ATTACK__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Attribute> getAttributes()
  {
    if (attributes == null)
    {
      attributes = new EObjectContainmentEList<Attribute>(Attribute.class, this, GamePackage.ATTACK__ATTRIBUTES);
    }
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AttributeAttack> getAttributesAttack()
  {
    if (attributesAttack == null)
    {
      attributesAttack = new EObjectContainmentEList<AttributeAttack>(AttributeAttack.class, this, GamePackage.ATTACK__ATTRIBUTES_ATTACK);
    }
    return attributesAttack;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<RuleSet> getRules()
  {
    if (rules == null)
    {
      rules = new EObjectContainmentEList<RuleSet>(RuleSet.class, this, GamePackage.ATTACK__RULES);
    }
    return rules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GamePackage.ATTACK__ATTRIBUTES:
        return ((InternalEList<?>)getAttributes()).basicRemove(otherEnd, msgs);
      case GamePackage.ATTACK__ATTRIBUTES_ATTACK:
        return ((InternalEList<?>)getAttributesAttack()).basicRemove(otherEnd, msgs);
      case GamePackage.ATTACK__RULES:
        return ((InternalEList<?>)getRules()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GamePackage.ATTACK__NAME:
        return getName();
      case GamePackage.ATTACK__ATTRIBUTES:
        return getAttributes();
      case GamePackage.ATTACK__ATTRIBUTES_ATTACK:
        return getAttributesAttack();
      case GamePackage.ATTACK__RULES:
        return getRules();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GamePackage.ATTACK__NAME:
        setName((String)newValue);
        return;
      case GamePackage.ATTACK__ATTRIBUTES:
        getAttributes().clear();
        getAttributes().addAll((Collection<? extends Attribute>)newValue);
        return;
      case GamePackage.ATTACK__ATTRIBUTES_ATTACK:
        getAttributesAttack().clear();
        getAttributesAttack().addAll((Collection<? extends AttributeAttack>)newValue);
        return;
      case GamePackage.ATTACK__RULES:
        getRules().clear();
        getRules().addAll((Collection<? extends RuleSet>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.ATTACK__NAME:
        setName(NAME_EDEFAULT);
        return;
      case GamePackage.ATTACK__ATTRIBUTES:
        getAttributes().clear();
        return;
      case GamePackage.ATTACK__ATTRIBUTES_ATTACK:
        getAttributesAttack().clear();
        return;
      case GamePackage.ATTACK__RULES:
        getRules().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.ATTACK__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case GamePackage.ATTACK__ATTRIBUTES:
        return attributes != null && !attributes.isEmpty();
      case GamePackage.ATTACK__ATTRIBUTES_ATTACK:
        return attributesAttack != null && !attributesAttack.isEmpty();
      case GamePackage.ATTACK__RULES:
        return rules != null && !rules.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //AttackImpl
