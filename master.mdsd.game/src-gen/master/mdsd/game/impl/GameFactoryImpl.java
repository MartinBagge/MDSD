/**
 * generated by Xtext 2.10.0
 */
package master.mdsd.game.impl;

import master.mdsd.game.A;
import master.mdsd.game.Action;
import master.mdsd.game.Ammo;
import master.mdsd.game.AttS;
import master.mdsd.game.Attack;
import master.mdsd.game.Attribute;
import master.mdsd.game.AttributeAttack;
import master.mdsd.game.AttributeInitializer;
import master.mdsd.game.AttributeTypeAttack;
import master.mdsd.game.Behaviour;
import master.mdsd.game.Bullet;
import master.mdsd.game.CharDec;
import master.mdsd.game.CharType;
import master.mdsd.game.CharacterAttr;
import master.mdsd.game.CompOperator;
import master.mdsd.game.D;
import master.mdsd.game.DynamicEntity;
import master.mdsd.game.EQ;
import master.mdsd.game.Entity;
import master.mdsd.game.GT;
import master.mdsd.game.GTE;
import master.mdsd.game.GameFactory;
import master.mdsd.game.GamePackage;
import master.mdsd.game.Initializer;
import master.mdsd.game.IntAtt;
import master.mdsd.game.LT;
import master.mdsd.game.LTE;
import master.mdsd.game.Location;
import master.mdsd.game.LogicOperator;
import master.mdsd.game.LogicOperatorLoop;
import master.mdsd.game.M;
import master.mdsd.game.Map;
import master.mdsd.game.Model;
import master.mdsd.game.Pathfinding;
import master.mdsd.game.ReferenceCharacter;
import master.mdsd.game.Rule;
import master.mdsd.game.RuleSet;
import master.mdsd.game.RuleSetup;
import master.mdsd.game.RuleType;
import master.mdsd.game.StaticEntity;
import master.mdsd.game.T;
import master.mdsd.game.TargetRef;
import master.mdsd.game.Type;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GameFactoryImpl extends EFactoryImpl implements GameFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GameFactory init()
  {
    try
    {
      GameFactory theGameFactory = (GameFactory)EPackage.Registry.INSTANCE.getEFactory(GamePackage.eNS_URI);
      if (theGameFactory != null)
      {
        return theGameFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GameFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GamePackage.MODEL: return createModel();
      case GamePackage.MAP: return createMap();
      case GamePackage.ATTRIBUTE: return createAttribute();
      case GamePackage.ENTITY: return createEntity();
      case GamePackage.DYNAMIC_ENTITY: return createDynamicEntity();
      case GamePackage.STATIC_ENTITY: return createStaticEntity();
      case GamePackage.CHARACTER: return createCharacter();
      case GamePackage.TYPE: return createType();
      case GamePackage.CHAR_TYPE: return createCharType();
      case GamePackage.OBJECT: return createObject();
      case GamePackage.BEHAVIOUR: return createBehaviour();
      case GamePackage.PATHFINDING: return createPathfinding();
      case GamePackage.RULE_SET: return createRuleSet();
      case GamePackage.RULE: return createRule();
      case GamePackage.RULE_SETUP: return createRuleSetup();
      case GamePackage.INT_ATT: return createIntAtt();
      case GamePackage.LOGIC_OPERATOR_LOOP: return createLogicOperatorLoop();
      case GamePackage.REFERENCE_CHARACTER: return createReferenceCharacter();
      case GamePackage.RULE_TYPE: return createRuleType();
      case GamePackage.COMP_OPERATOR: return createCompOperator();
      case GamePackage.ACTION: return createAction();
      case GamePackage.CHAR_DEC: return createCharDec();
      case GamePackage.CHARACTER_ATTR: return createCharacterAttr();
      case GamePackage.LOGIC_OPERATOR: return createLogicOperator();
      case GamePackage.ATTACK: return createAttack();
      case GamePackage.ATTRIBUTE_ATTACK: return createAttributeAttack();
      case GamePackage.ATTRIBUTE_TYPE_ATTACK: return createAttributeTypeAttack();
      case GamePackage.BULLET: return createBullet();
      case GamePackage.INITIALIZER: return createInitializer();
      case GamePackage.ATTRIBUTE_INITIALIZER: return createAttributeInitializer();
      case GamePackage.TARGET_REF: return createTargetRef();
      case GamePackage.LOCATION: return createLocation();
      case GamePackage.LT: return createLT();
      case GamePackage.GT: return createGT();
      case GamePackage.LTE: return createLTE();
      case GamePackage.GTE: return createGTE();
      case GamePackage.EQ: return createEQ();
      case GamePackage.T: return createT();
      case GamePackage.A: return createA();
      case GamePackage.M: return createM();
      case GamePackage.D: return createD();
      case GamePackage.AMMO: return createAmmo();
      case GamePackage.ATT_S: return createAttS();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Map createMap()
  {
    MapImpl map = new MapImpl();
    return map;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DynamicEntity createDynamicEntity()
  {
    DynamicEntityImpl dynamicEntity = new DynamicEntityImpl();
    return dynamicEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StaticEntity createStaticEntity()
  {
    StaticEntityImpl staticEntity = new StaticEntityImpl();
    return staticEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public master.mdsd.game.Character createCharacter()
  {
    CharacterImpl character = new CharacterImpl();
    return character;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CharType createCharType()
  {
    CharTypeImpl charType = new CharTypeImpl();
    return charType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public master.mdsd.game.Object createObject()
  {
    ObjectImpl object = new ObjectImpl();
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Behaviour createBehaviour()
  {
    BehaviourImpl behaviour = new BehaviourImpl();
    return behaviour;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pathfinding createPathfinding()
  {
    PathfindingImpl pathfinding = new PathfindingImpl();
    return pathfinding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleSet createRuleSet()
  {
    RuleSetImpl ruleSet = new RuleSetImpl();
    return ruleSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleSetup createRuleSetup()
  {
    RuleSetupImpl ruleSetup = new RuleSetupImpl();
    return ruleSetup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntAtt createIntAtt()
  {
    IntAttImpl intAtt = new IntAttImpl();
    return intAtt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogicOperatorLoop createLogicOperatorLoop()
  {
    LogicOperatorLoopImpl logicOperatorLoop = new LogicOperatorLoopImpl();
    return logicOperatorLoop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReferenceCharacter createReferenceCharacter()
  {
    ReferenceCharacterImpl referenceCharacter = new ReferenceCharacterImpl();
    return referenceCharacter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleType createRuleType()
  {
    RuleTypeImpl ruleType = new RuleTypeImpl();
    return ruleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompOperator createCompOperator()
  {
    CompOperatorImpl compOperator = new CompOperatorImpl();
    return compOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CharDec createCharDec()
  {
    CharDecImpl charDec = new CharDecImpl();
    return charDec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CharacterAttr createCharacterAttr()
  {
    CharacterAttrImpl characterAttr = new CharacterAttrImpl();
    return characterAttr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogicOperator createLogicOperator()
  {
    LogicOperatorImpl logicOperator = new LogicOperatorImpl();
    return logicOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attack createAttack()
  {
    AttackImpl attack = new AttackImpl();
    return attack;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeAttack createAttributeAttack()
  {
    AttributeAttackImpl attributeAttack = new AttributeAttackImpl();
    return attributeAttack;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeTypeAttack createAttributeTypeAttack()
  {
    AttributeTypeAttackImpl attributeTypeAttack = new AttributeTypeAttackImpl();
    return attributeTypeAttack;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bullet createBullet()
  {
    BulletImpl bullet = new BulletImpl();
    return bullet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Initializer createInitializer()
  {
    InitializerImpl initializer = new InitializerImpl();
    return initializer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeInitializer createAttributeInitializer()
  {
    AttributeInitializerImpl attributeInitializer = new AttributeInitializerImpl();
    return attributeInitializer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TargetRef createTargetRef()
  {
    TargetRefImpl targetRef = new TargetRefImpl();
    return targetRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Location createLocation()
  {
    LocationImpl location = new LocationImpl();
    return location;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LT createLT()
  {
    LTImpl lt = new LTImpl();
    return lt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GT createGT()
  {
    GTImpl gt = new GTImpl();
    return gt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LTE createLTE()
  {
    LTEImpl lte = new LTEImpl();
    return lte;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GTE createGTE()
  {
    GTEImpl gte = new GTEImpl();
    return gte;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EQ createEQ()
  {
    EQImpl eq = new EQImpl();
    return eq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public T createT()
  {
    TImpl t = new TImpl();
    return t;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public A createA()
  {
    AImpl a = new AImpl();
    return a;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public M createM()
  {
    MImpl m = new MImpl();
    return m;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public D createD()
  {
    DImpl d = new DImpl();
    return d;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Ammo createAmmo()
  {
    AmmoImpl ammo = new AmmoImpl();
    return ammo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttS createAttS()
  {
    AttSImpl attS = new AttSImpl();
    return attS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GamePackage getGamePackage()
  {
    return (GamePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GamePackage getPackage()
  {
    return GamePackage.eINSTANCE;
  }

} //GameFactoryImpl
