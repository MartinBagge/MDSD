/*
 * generated by Xtext 2.10.0
 */
package master.mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GameGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntitiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntitiesEntityParserRuleCall_3_0 = (RuleCall)cEntitiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Model:
		//	{Model} 'Game' '{' entities+=Entity* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} 'Game' '{' entities+=Entity* '}'
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//'Game'
		public Keyword getGameKeyword_1() { return cGameKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//entities+=Entity*
		public Assignment getEntitiesAssignment_3() { return cEntitiesAssignment_3; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_3_0() { return cEntitiesEntityParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GameMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.GameMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEntityIdMapKeyword_0_0 = (Keyword)cEntityIdAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeListAttributeParserRuleCall_2_0 = (RuleCall)cAttributeListAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GameMap:
		//	entityId='Map' '{' attributeList+=Attribute* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//entityId='Map' '{' attributeList+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//entityId='Map'
		public Assignment getEntityIdAssignment_0() { return cEntityIdAssignment_0; }
		
		//'Map'
		public Keyword getEntityIdMapKeyword_0_0() { return cEntityIdMapKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//attributeList+=Attribute*
		public Assignment getAttributeListAssignment_2() { return cAttributeListAssignment_2; }
		
		//Attribute
		public RuleCall getAttributeListAttributeParserRuleCall_2_0() { return cAttributeListAttributeParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAttributenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributenameIDTerminalRuleCall_1_0 = (RuleCall)cAttributenameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Attribute:
		//	{Attribute} attributename=ID type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//{Attribute} attributename=ID type=Type
		public Group getGroup() { return cGroup; }
		
		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }
		
		//attributename=ID
		public Assignment getAttributenameAssignment_1() { return cAttributenameAssignment_1; }
		
		//ID
		public RuleCall getAttributenameIDTerminalRuleCall_1_0() { return cAttributenameIDTerminalRuleCall_1_0; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDynamicEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStaticEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Entity:
		//	DynamicEntity | StaticEntity;
		@Override public ParserRule getRule() { return rule; }
		
		//DynamicEntity | StaticEntity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DynamicEntity
		public RuleCall getDynamicEntityParserRuleCall_0() { return cDynamicEntityParserRuleCall_0; }
		
		//StaticEntity
		public RuleCall getStaticEntityParserRuleCall_1() { return cStaticEntityParserRuleCall_1; }
	}
	public class DynamicEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.DynamicEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharacterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBehaviourParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DynamicEntity:
		//	Character | Object | Behaviour;
		@Override public ParserRule getRule() { return rule; }
		
		//Character | Object | Behaviour
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Character
		public RuleCall getCharacterParserRuleCall_0() { return cCharacterParserRuleCall_0; }
		
		//Object
		public RuleCall getObjectParserRuleCall_1() { return cObjectParserRuleCall_1; }
		
		//Behaviour
		public RuleCall getBehaviourParserRuleCall_2() { return cBehaviourParserRuleCall_2; }
	}
	public class StaticEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.StaticEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGameMapParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitializerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StaticEntity:
		//	GameMap | Initializer;
		@Override public ParserRule getRule() { return rule; }
		
		//GameMap | Initializer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GameMap
		public RuleCall getGameMapParserRuleCall_0() { return cGameMapParserRuleCall_0; }
		
		//Initializer
		public RuleCall getInitializerParserRuleCall_1() { return cInitializerParserRuleCall_1; }
	}
	public class CharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Character");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityidAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEntityidCharacterKeyword_0_0 = (Keyword)cEntityidAssignment_0.eContents().get(0);
		private final Assignment cCharIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCharIdCharTypeParserRuleCall_1_0 = (RuleCall)cCharIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttAttributeParserRuleCall_4_0 = (RuleCall)cAttAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Character:
		//	entityid='Character' charId=CharType name=ID '{' att+=Attribute* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//entityid='Character' charId=CharType name=ID '{' att+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//entityid='Character'
		public Assignment getEntityidAssignment_0() { return cEntityidAssignment_0; }
		
		//'Character'
		public Keyword getEntityidCharacterKeyword_0_0() { return cEntityidCharacterKeyword_0_0; }
		
		//charId=CharType
		public Assignment getCharIdAssignment_1() { return cCharIdAssignment_1; }
		
		//CharType
		public RuleCall getCharIdCharTypeParserRuleCall_1_0() { return cCharIdCharTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//att+=Attribute*
		public Assignment getAttAssignment_4() { return cAttAssignment_4; }
		
		//Attribute
		public RuleCall getAttAttributeParserRuleCall_4_0() { return cAttAttributeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueIdINTORDECParserRuleCall_0_0 = (RuleCall)cValueIdAssignment_0.eContents().get(0);
		private final Assignment cValueIdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueIdIDTerminalRuleCall_1_0 = (RuleCall)cValueIdAssignment_1.eContents().get(0);
		private final Assignment cValueIdVecAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueIdVecVECTORParserRuleCall_2_0 = (RuleCall)cValueIdVecAssignment_2.eContents().get(0);
		
		//Type:
		//	valueId=INTORDEC | valueId=ID | valueIdVec=VECTOR;
		@Override public ParserRule getRule() { return rule; }
		
		//valueId=INTORDEC | valueId=ID | valueIdVec=VECTOR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//valueId=INTORDEC
		public Assignment getValueIdAssignment_0() { return cValueIdAssignment_0; }
		
		//INTORDEC
		public RuleCall getValueIdINTORDECParserRuleCall_0_0() { return cValueIdINTORDECParserRuleCall_0_0; }
		
		//valueId=ID
		public Assignment getValueIdAssignment_1() { return cValueIdAssignment_1; }
		
		//ID
		public RuleCall getValueIdIDTerminalRuleCall_1_0() { return cValueIdIDTerminalRuleCall_1_0; }
		
		//valueIdVec=VECTOR
		public Assignment getValueIdVecAssignment_2() { return cValueIdVecAssignment_2; }
		
		//VECTOR
		public RuleCall getValueIdVecVECTORParserRuleCall_2_0() { return cValueIdVecVECTORParserRuleCall_2_0; }
	}
	public class VECTORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.VECTOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXValINTORDECParserRuleCall_0_0 = (RuleCall)cXValAssignment_0.eContents().get(0);
		private final Assignment cYValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cYValINTORDECParserRuleCall_1_0 = (RuleCall)cYValAssignment_1.eContents().get(0);
		
		//VECTOR:
		//	xVal=INTORDEC yVal=INTORDEC;
		@Override public ParserRule getRule() { return rule; }
		
		//xVal=INTORDEC yVal=INTORDEC
		public Group getGroup() { return cGroup; }
		
		//xVal=INTORDEC
		public Assignment getXValAssignment_0() { return cXValAssignment_0; }
		
		//INTORDEC
		public RuleCall getXValINTORDECParserRuleCall_0_0() { return cXValINTORDECParserRuleCall_0_0; }
		
		//yVal=INTORDEC
		public Assignment getYValAssignment_1() { return cYValAssignment_1; }
		
		//INTORDEC
		public RuleCall getYValINTORDECParserRuleCall_1_0() { return cYValINTORDECParserRuleCall_1_0; }
	}
	public class INTORDECElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.INTORDEC");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDECIMALParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//INTORDEC:
		//	INT | DECIMAL;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | DECIMAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//DECIMAL
		public RuleCall getDECIMALParserRuleCall_1() { return cDECIMALParserRuleCall_1; }
	}
	public class CharTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.CharType");
		private final Assignment cCharTypeIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCharTypeIdIDTerminalRuleCall_0 = (RuleCall)cCharTypeIdAssignment.eContents().get(0);
		
		//CharType:
		//	charTypeId=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//charTypeId=ID
		public Assignment getCharTypeIdAssignment() { return cCharTypeIdAssignment; }
		
		//ID
		public RuleCall getCharTypeIdIDTerminalRuleCall_0() { return cCharTypeIdIDTerminalRuleCall_0; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityidAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEntityidObjectKeyword_0_0 = (Keyword)cEntityidAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttAttributeParserRuleCall_3_0 = (RuleCall)cAttAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Object:
		//	entityid='Object' name=ID '{' att+=Attribute* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//entityid='Object' name=ID '{' att+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//entityid='Object'
		public Assignment getEntityidAssignment_0() { return cEntityidAssignment_0; }
		
		//'Object'
		public Keyword getEntityidObjectKeyword_0_0() { return cEntityidObjectKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//att+=Attribute*
		public Assignment getAttAssignment_3() { return cAttAssignment_3; }
		
		//Attribute
		public RuleCall getAttAttributeParserRuleCall_3_0() { return cAttAttributeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BehaviourElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Behaviour");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPathfindingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttackParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBulletParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Behaviour:
		//	Pathfinding | Attack | Bullet;
		@Override public ParserRule getRule() { return rule; }
		
		//Pathfinding | Attack | Bullet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Pathfinding
		public RuleCall getPathfindingParserRuleCall_0() { return cPathfindingParserRuleCall_0; }
		
		//Attack
		public RuleCall getAttackParserRuleCall_1() { return cAttackParserRuleCall_1; }
		
		//Bullet
		public RuleCall getBulletParserRuleCall_2() { return cBulletParserRuleCall_2; }
	}
	public class PathfindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Pathfinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityidAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEntityidPathfindingKeyword_0_0 = (Keyword)cEntityidAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttPathfindingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttPathfindingAttributeParserRuleCall_3_0 = (RuleCall)cAttPathfindingAssignment_3.eContents().get(0);
		private final Assignment cConditionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionsConditionParserRuleCall_4_0 = (RuleCall)cConditionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Pathfinding:
		//	entityid='Pathfinding' name=ID '{' attPathfinding+=Attribute* conditions+=Condition* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//entityid='Pathfinding' name=ID '{' attPathfinding+=Attribute* conditions+=Condition* '}'
		public Group getGroup() { return cGroup; }
		
		//entityid='Pathfinding'
		public Assignment getEntityidAssignment_0() { return cEntityidAssignment_0; }
		
		//'Pathfinding'
		public Keyword getEntityidPathfindingKeyword_0_0() { return cEntityidPathfindingKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attPathfinding+=Attribute*
		public Assignment getAttPathfindingAssignment_3() { return cAttPathfindingAssignment_3; }
		
		//Attribute
		public RuleCall getAttPathfindingAttributeParserRuleCall_3_0() { return cAttPathfindingAttributeParserRuleCall_3_0; }
		
		//conditions+=Condition*
		public Assignment getConditionsAssignment_4() { return cConditionsAssignment_4; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_4_0() { return cConditionsConditionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeRefLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeRefLeftCharacterAttrParserRuleCall_0_0 = (RuleCall)cAttributeRefLeftAssignment_0.eContents().get(0);
		private final Assignment cLeftExAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExExpressionParserRuleCall_1_0 = (RuleCall)cLeftExAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorCompOperatorParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cAttributeRefRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeRefRightCharacterAttrParserRuleCall_3_0 = (RuleCall)cAttributeRefRightAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOpAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOpLogicOperatorParserRuleCall_4_0_0 = (RuleCall)cOpAssignment_4_0.eContents().get(0);
		private final Assignment cRightExAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRightExExpressionParserRuleCall_4_1_0 = (RuleCall)cRightExAssignment_4_1.eContents().get(0);
		
		//BooleanExpression:
		//	attributeRefLeft=CharacterAttr? leftEx=Expression? operator=CompOperator attributeRefRight=CharacterAttr?
		//	(op=LogicOperator? rightEx=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//attributeRefLeft=CharacterAttr? leftEx=Expression? operator=CompOperator attributeRefRight=CharacterAttr?
		//(op=LogicOperator? rightEx=Expression)?
		public Group getGroup() { return cGroup; }
		
		//attributeRefLeft=CharacterAttr?
		public Assignment getAttributeRefLeftAssignment_0() { return cAttributeRefLeftAssignment_0; }
		
		//CharacterAttr
		public RuleCall getAttributeRefLeftCharacterAttrParserRuleCall_0_0() { return cAttributeRefLeftCharacterAttrParserRuleCall_0_0; }
		
		//leftEx=Expression?
		public Assignment getLeftExAssignment_1() { return cLeftExAssignment_1; }
		
		//Expression
		public RuleCall getLeftExExpressionParserRuleCall_1_0() { return cLeftExExpressionParserRuleCall_1_0; }
		
		//operator=CompOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//CompOperator
		public RuleCall getOperatorCompOperatorParserRuleCall_2_0() { return cOperatorCompOperatorParserRuleCall_2_0; }
		
		//attributeRefRight=CharacterAttr?
		public Assignment getAttributeRefRightAssignment_3() { return cAttributeRefRightAssignment_3; }
		
		//CharacterAttr
		public RuleCall getAttributeRefRightCharacterAttrParserRuleCall_3_0() { return cAttributeRefRightCharacterAttrParserRuleCall_3_0; }
		
		//(op=LogicOperator? rightEx=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//op=LogicOperator?
		public Assignment getOpAssignment_4_0() { return cOpAssignment_4_0; }
		
		//LogicOperator
		public RuleCall getOpLogicOperatorParserRuleCall_4_0_0() { return cOpLogicOperatorParserRuleCall_4_0_0; }
		
		//rightEx=Expression
		public Assignment getRightExAssignment_4_1() { return cRightExAssignment_4_1; }
		
		//Expression
		public RuleCall getRightExExpressionParserRuleCall_4_1_0() { return cRightExExpressionParserRuleCall_4_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTmAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTmTerminalExpressionParserRuleCall_0_0 = (RuleCall)cTmAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpLogicOperatorParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTerminalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	tm=TerminalExpression ({Operation.left=current} op=LogicOperator right=TerminalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//tm=TerminalExpression ({Operation.left=current} op=LogicOperator right=TerminalExpression)*
		public Group getGroup() { return cGroup; }
		
		//tm=TerminalExpression
		public Assignment getTmAssignment_0() { return cTmAssignment_0; }
		
		//TerminalExpression
		public RuleCall getTmTerminalExpressionParserRuleCall_0_0() { return cTmTerminalExpressionParserRuleCall_0_0; }
		
		//({Operation.left=current} op=LogicOperator right=TerminalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Operation.left=current}
		public Action getOperationLeftAction_1_0() { return cOperationLeftAction_1_0; }
		
		//op=LogicOperator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//LogicOperator
		public RuleCall getOpLogicOperatorParserRuleCall_1_1_0() { return cOpLogicOperatorParserRuleCall_1_1_0; }
		
		//right=TerminalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//TerminalExpression
		public RuleCall getRightTerminalExpressionParserRuleCall_1_2_0() { return cRightTerminalExpressionParserRuleCall_1_2_0; }
	}
	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTORDECParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//TerminalExpression Expression:
		//	'(' Expression ')' | {IntLiteral} value=INTORDEC
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {IntLiteral} value=INTORDEC
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{IntLiteral} value=INTORDEC
		public Group getGroup_1() { return cGroup_1; }
		
		//{IntLiteral}
		public Action getIntLiteralAction_1_0() { return cIntLiteralAction_1_0; }
		
		//value=INTORDEC
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INTORDEC
		public RuleCall getValueINTORDECParserRuleCall_1_1_0() { return cValueINTORDECParserRuleCall_1_1_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfConditionBooleanExpressionParserRuleCall_2_0 = (RuleCall)cIfConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenActionParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseIfConditionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseIfConditionConditionParserRuleCall_5_1_0 = (RuleCall)cElseIfConditionAssignment_5_1.eContents().get(0);
		
		//Condition:
		//	'if' '(' ifCondition=BooleanExpression ')'
		//	then=Action (=> 'else' elseIfCondition=Condition)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' ifCondition=BooleanExpression ')' then=Action (=> 'else' elseIfCondition=Condition)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ifCondition=BooleanExpression
		public Assignment getIfConditionAssignment_2() { return cIfConditionAssignment_2; }
		
		//BooleanExpression
		public RuleCall getIfConditionBooleanExpressionParserRuleCall_2_0() { return cIfConditionBooleanExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//then=Action
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//Action
		public RuleCall getThenActionParserRuleCall_4_0() { return cThenActionParserRuleCall_4_0; }
		
		//(=> 'else' elseIfCondition=Condition)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseIfCondition=Condition
		public Assignment getElseIfConditionAssignment_5_1() { return cElseIfConditionAssignment_5_1; }
		
		//Condition
		public RuleCall getElseIfConditionConditionParserRuleCall_5_1_0() { return cElseIfConditionConditionParserRuleCall_5_1_0; }
	}
	public class DECIMALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.DECIMAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DECIMAL:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class ReferenceCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.ReferenceCharacter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cReferenceCharacterAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cCharacterIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cCharacterIdCharacterCrossReference_0_1_0 = (CrossReference)cCharacterIdAssignment_0_1.eContents().get(0);
		private final RuleCall cCharacterIdCharacterIDTerminalRuleCall_0_1_0_1 = (RuleCall)cCharacterIdCharacterCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cReferenceCharacterAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTargetIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cTargetIdSelfKeyword_1_1_0 = (Keyword)cTargetIdAssignment_1_1.eContents().get(0);
		
		//ReferenceCharacter:
		//	{ReferenceCharacter} characterId=[Character] | {ReferenceCharacter} targetId='self';
		@Override public ParserRule getRule() { return rule; }
		
		//{ReferenceCharacter} characterId=[Character] | {ReferenceCharacter} targetId='self'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ReferenceCharacter} characterId=[Character]
		public Group getGroup_0() { return cGroup_0; }
		
		//{ReferenceCharacter}
		public Action getReferenceCharacterAction_0_0() { return cReferenceCharacterAction_0_0; }
		
		//characterId=[Character]
		public Assignment getCharacterIdAssignment_0_1() { return cCharacterIdAssignment_0_1; }
		
		//[Character]
		public CrossReference getCharacterIdCharacterCrossReference_0_1_0() { return cCharacterIdCharacterCrossReference_0_1_0; }
		
		//ID
		public RuleCall getCharacterIdCharacterIDTerminalRuleCall_0_1_0_1() { return cCharacterIdCharacterIDTerminalRuleCall_0_1_0_1; }
		
		//{ReferenceCharacter} targetId='self'
		public Group getGroup_1() { return cGroup_1; }
		
		//{ReferenceCharacter}
		public Action getReferenceCharacterAction_1_0() { return cReferenceCharacterAction_1_0; }
		
		//targetId='self'
		public Assignment getTargetIdAssignment_1_1() { return cTargetIdAssignment_1_1; }
		
		//'self'
		public Keyword getTargetIdSelfKeyword_1_1_0() { return cTargetIdSelfKeyword_1_1_0; }
	}
	public class CompOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.CompOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLTAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOpLessThanSignKeyword_0_1_0 = (Keyword)cOpAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cGTAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLTEAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cOpLessThanSignEqualsSignKeyword_2_1_0 = (Keyword)cOpAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cGTEAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cOpAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_3_1_0 = (Keyword)cOpAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cEQAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cOpAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cOpEqualsSignKeyword_4_1_0 = (Keyword)cOpAssignment_4_1.eContents().get(0);
		
		//CompOperator:
		//	{LT} op='<' | {GT} op='>' | {LTE} op='<=' | {GTE} op='>=' | {EQ} op='=';
		@Override public ParserRule getRule() { return rule; }
		
		//{LT} op='<' | {GT} op='>' | {LTE} op='<=' | {GTE} op='>=' | {EQ} op='='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{LT} op='<'
		public Group getGroup_0() { return cGroup_0; }
		
		//{LT}
		public Action getLTAction_0_0() { return cLTAction_0_0; }
		
		//op='<'
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_0_1_0() { return cOpLessThanSignKeyword_0_1_0; }
		
		//{GT} op='>'
		public Group getGroup_1() { return cGroup_1; }
		
		//{GT}
		public Action getGTAction_1_0() { return cGTAction_1_0; }
		
		//op='>'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0() { return cOpGreaterThanSignKeyword_1_1_0; }
		
		//{LTE} op='<='
		public Group getGroup_2() { return cGroup_2; }
		
		//{LTE}
		public Action getLTEAction_2_0() { return cLTEAction_2_0; }
		
		//op='<='
		public Assignment getOpAssignment_2_1() { return cOpAssignment_2_1; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_2_1_0() { return cOpLessThanSignEqualsSignKeyword_2_1_0; }
		
		//{GTE} op='>='
		public Group getGroup_3() { return cGroup_3; }
		
		//{GTE}
		public Action getGTEAction_3_0() { return cGTEAction_3_0; }
		
		//op='>='
		public Assignment getOpAssignment_3_1() { return cOpAssignment_3_1; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_3_1_0() { return cOpGreaterThanSignEqualsSignKeyword_3_1_0; }
		
		//{EQ} op='='
		public Group getGroup_4() { return cGroup_4; }
		
		//{EQ}
		public Action getEQAction_4_0() { return cEQAction_4_0; }
		
		//op='='
		public Assignment getOpAssignment_4_1() { return cOpAssignment_4_1; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_4_1_0() { return cOpEqualsSignKeyword_4_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCharAttAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCharAttCharacterAttrParserRuleCall_1_0 = (RuleCall)cCharAttAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCharDecAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCharDecCharDecParserRuleCall_3_0 = (RuleCall)cCharDecAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOpAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOpLogicOperatorParserRuleCall_4_0_0 = (RuleCall)cOpAssignment_4_0.eContents().get(0);
		private final Assignment cExAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExExpressionParserRuleCall_4_1_0 = (RuleCall)cExAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Action:
		//	'(' charAtt=CharacterAttr '=' charDec=CharDec? (op=LogicOperator? ex=Expression)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' charAtt=CharacterAttr '=' charDec=CharDec? (op=LogicOperator? ex=Expression)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//charAtt=CharacterAttr
		public Assignment getCharAttAssignment_1() { return cCharAttAssignment_1; }
		
		//CharacterAttr
		public RuleCall getCharAttCharacterAttrParserRuleCall_1_0() { return cCharAttCharacterAttrParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//charDec=CharDec?
		public Assignment getCharDecAssignment_3() { return cCharDecAssignment_3; }
		
		//CharDec
		public RuleCall getCharDecCharDecParserRuleCall_3_0() { return cCharDecCharDecParserRuleCall_3_0; }
		
		//(op=LogicOperator? ex=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//op=LogicOperator?
		public Assignment getOpAssignment_4_0() { return cOpAssignment_4_0; }
		
		//LogicOperator
		public RuleCall getOpLogicOperatorParserRuleCall_4_0_0() { return cOpLogicOperatorParserRuleCall_4_0_0; }
		
		//ex=Expression
		public Assignment getExAssignment_4_1() { return cExAssignment_4_1; }
		
		//Expression
		public RuleCall getExExpressionParserRuleCall_4_1_0() { return cExExpressionParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CharDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.CharDec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCharAttResultAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCharAttResultCharacterAttrParserRuleCall_0_0 = (RuleCall)cCharAttResultAssignment_0.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValINTORDECParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//CharDec:
		//	charAttResult=CharacterAttr | val=INTORDEC;
		@Override public ParserRule getRule() { return rule; }
		
		//charAttResult=CharacterAttr | val=INTORDEC
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//charAttResult=CharacterAttr
		public Assignment getCharAttResultAssignment_0() { return cCharAttResultAssignment_0; }
		
		//CharacterAttr
		public RuleCall getCharAttResultCharacterAttrParserRuleCall_0_0() { return cCharAttResultCharacterAttrParserRuleCall_0_0; }
		
		//val=INTORDEC
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//INTORDEC
		public RuleCall getValINTORDECParserRuleCall_1_0() { return cValINTORDECParserRuleCall_1_0; }
	}
	public class CharacterAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.CharacterAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferenceReferenceCharacterParserRuleCall_0_0 = (RuleCall)cReferenceAssignment_0.eContents().get(0);
		private final Assignment cAttributenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributenameIDTerminalRuleCall_1_0 = (RuleCall)cAttributenameAssignment_1.eContents().get(0);
		
		//CharacterAttr:
		//	reference=ReferenceCharacter attributename=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//reference=ReferenceCharacter attributename=ID
		public Group getGroup() { return cGroup; }
		
		//reference=ReferenceCharacter
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }
		
		//ReferenceCharacter
		public RuleCall getReferenceReferenceCharacterParserRuleCall_0_0() { return cReferenceReferenceCharacterParserRuleCall_0_0; }
		
		//attributename=ID
		public Assignment getAttributenameAssignment_1() { return cAttributenameAssignment_1; }
		
		//ID
		public RuleCall getAttributenameIDTerminalRuleCall_1_0() { return cAttributenameIDTerminalRuleCall_1_0; }
	}
	public class LogicOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.LogicOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLopAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cLopAsteriskKeyword_0_1_0 = (Keyword)cLopAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLopAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cLopPlusSignKeyword_1_1_0 = (Keyword)cLopAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cMAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cLopAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cLopHyphenMinusKeyword_2_1_0 = (Keyword)cLopAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cLopAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cLopSolidusKeyword_3_1_0 = (Keyword)cLopAssignment_3_1.eContents().get(0);
		
		//LogicOperator:
		//	{T} lop='*' | {A} lop='+' | {M} lop='-' | {D} lop='/';
		@Override public ParserRule getRule() { return rule; }
		
		//{T} lop='*' | {A} lop='+' | {M} lop='-' | {D} lop='/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{T} lop='*'
		public Group getGroup_0() { return cGroup_0; }
		
		//{T}
		public Action getTAction_0_0() { return cTAction_0_0; }
		
		//lop='*'
		public Assignment getLopAssignment_0_1() { return cLopAssignment_0_1; }
		
		//'*'
		public Keyword getLopAsteriskKeyword_0_1_0() { return cLopAsteriskKeyword_0_1_0; }
		
		//{A} lop='+'
		public Group getGroup_1() { return cGroup_1; }
		
		//{A}
		public Action getAAction_1_0() { return cAAction_1_0; }
		
		//lop='+'
		public Assignment getLopAssignment_1_1() { return cLopAssignment_1_1; }
		
		//'+'
		public Keyword getLopPlusSignKeyword_1_1_0() { return cLopPlusSignKeyword_1_1_0; }
		
		//{M} lop='-'
		public Group getGroup_2() { return cGroup_2; }
		
		//{M}
		public Action getMAction_2_0() { return cMAction_2_0; }
		
		//lop='-'
		public Assignment getLopAssignment_2_1() { return cLopAssignment_2_1; }
		
		//'-'
		public Keyword getLopHyphenMinusKeyword_2_1_0() { return cLopHyphenMinusKeyword_2_1_0; }
		
		//{D} lop='/'
		public Group getGroup_3() { return cGroup_3; }
		
		//{D}
		public Action getDAction_3_0() { return cDAction_3_0; }
		
		//lop='/'
		public Assignment getLopAssignment_3_1() { return cLopAssignment_3_1; }
		
		//'/'
		public Keyword getLopSolidusKeyword_3_1_0() { return cLopSolidusKeyword_3_1_0; }
	}
	public class AttackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Attack");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityidAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEntityidAttackKeyword_0_0 = (Keyword)cEntityidAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Assignment cAttributesAttackAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttackAttributeAttackParserRuleCall_4_0 = (RuleCall)cAttributesAttackAssignment_4.eContents().get(0);
		private final Assignment cRulesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRulesConditionParserRuleCall_5_0 = (RuleCall)cRulesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Attack:
		//	entityid='Attack' name=ID '{' attributes+=Attribute* attributesAttack+=AttributeAttack* rules+=Condition? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//entityid='Attack' name=ID '{' attributes+=Attribute* attributesAttack+=AttributeAttack* rules+=Condition? '}'
		public Group getGroup() { return cGroup; }
		
		//entityid='Attack'
		public Assignment getEntityidAssignment_0() { return cEntityidAssignment_0; }
		
		//'Attack'
		public Keyword getEntityidAttackKeyword_0_0() { return cEntityidAttackKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//attributesAttack+=AttributeAttack*
		public Assignment getAttributesAttackAssignment_4() { return cAttributesAttackAssignment_4; }
		
		//AttributeAttack
		public RuleCall getAttributesAttackAttributeAttackParserRuleCall_4_0() { return cAttributesAttackAttributeAttackParserRuleCall_4_0; }
		
		//rules+=Condition?
		public Assignment getRulesAssignment_5() { return cRulesAssignment_5; }
		
		//Condition
		public RuleCall getRulesConditionParserRuleCall_5_0() { return cRulesConditionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AttributeAttackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.AttributeAttack");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeTypesAttackAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeTypesAttackAttributeTypeAttackParserRuleCall_0_0 = (RuleCall)cAttributeTypesAttackAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//AttributeAttack:
		//	attributeTypesAttack+=AttributeTypeAttack type+=Type?;
		@Override public ParserRule getRule() { return rule; }
		
		//attributeTypesAttack+=AttributeTypeAttack type+=Type?
		public Group getGroup() { return cGroup; }
		
		//attributeTypesAttack+=AttributeTypeAttack
		public Assignment getAttributeTypesAttackAssignment_0() { return cAttributeTypesAttackAssignment_0; }
		
		//AttributeTypeAttack
		public RuleCall getAttributeTypesAttackAttributeTypeAttackParserRuleCall_0_0() { return cAttributeTypesAttackAttributeTypeAttackParserRuleCall_0_0; }
		
		//type+=Type?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class AttributeTypeAttackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.AttributeTypeAttack");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAmmoAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAmmunitionKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttSAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAttackspeedKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBulletAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cBulletKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBulletRefAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cBulletRefBulletCrossReference_2_2_0 = (CrossReference)cBulletRefAssignment_2_2.eContents().get(0);
		private final RuleCall cBulletRefBulletIDTerminalRuleCall_2_2_0_1 = (RuleCall)cBulletRefBulletCrossReference_2_2_0.eContents().get(1);
		
		//AttributeTypeAttack:
		//	{Ammo} 'Ammunition' | {AttS} 'Attackspeed' | {Bullet} 'Bullet' bulletRef=[Bullet];
		@Override public ParserRule getRule() { return rule; }
		
		//{Ammo} 'Ammunition' | {AttS} 'Attackspeed' | {Bullet} 'Bullet' bulletRef=[Bullet]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Ammo} 'Ammunition'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Ammo}
		public Action getAmmoAction_0_0() { return cAmmoAction_0_0; }
		
		//'Ammunition'
		public Keyword getAmmunitionKeyword_0_1() { return cAmmunitionKeyword_0_1; }
		
		//{AttS} 'Attackspeed'
		public Group getGroup_1() { return cGroup_1; }
		
		//{AttS}
		public Action getAttSAction_1_0() { return cAttSAction_1_0; }
		
		//'Attackspeed'
		public Keyword getAttackspeedKeyword_1_1() { return cAttackspeedKeyword_1_1; }
		
		//{Bullet} 'Bullet' bulletRef=[Bullet]
		public Group getGroup_2() { return cGroup_2; }
		
		//{Bullet}
		public Action getBulletAction_2_0() { return cBulletAction_2_0; }
		
		//'Bullet'
		public Keyword getBulletKeyword_2_1() { return cBulletKeyword_2_1; }
		
		//bulletRef=[Bullet]
		public Assignment getBulletRefAssignment_2_2() { return cBulletRefAssignment_2_2; }
		
		//[Bullet]
		public CrossReference getBulletRefBulletCrossReference_2_2_0() { return cBulletRefBulletCrossReference_2_2_0; }
		
		//ID
		public RuleCall getBulletRefBulletIDTerminalRuleCall_2_2_0_1() { return cBulletRefBulletIDTerminalRuleCall_2_2_0_1; }
	}
	public class BulletElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Bullet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityidAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEntityidBulletKeyword_0_0 = (Keyword)cEntityidAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesBulletAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesBulletAttributeParserRuleCall_3_0 = (RuleCall)cAttributesBulletAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Bullet:
		//	entityid='Bullet' name=ID '{' attributesBullet+=Attribute* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//entityid='Bullet' name=ID '{' attributesBullet+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//entityid='Bullet'
		public Assignment getEntityidAssignment_0() { return cEntityidAssignment_0; }
		
		//'Bullet'
		public Keyword getEntityidBulletKeyword_0_0() { return cEntityidBulletKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributesBullet+=Attribute*
		public Assignment getAttributesBulletAssignment_3() { return cAttributesBulletAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesBulletAttributeParserRuleCall_3_0() { return cAttributesBulletAttributeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Initializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitializerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEntityIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cEntityIdInitializerKeyword_1_0 = (Keyword)cEntityIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesInitializerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesInitializerAttributeInitializerParserRuleCall_3_0 = (RuleCall)cAttributesInitializerAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Initializer:
		//	{Initializer} entityId='Initializer' '{' attributesInitializer+=AttributeInitializer* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Initializer} entityId='Initializer' '{' attributesInitializer+=AttributeInitializer* '}'
		public Group getGroup() { return cGroup; }
		
		//{Initializer}
		public Action getInitializerAction_0() { return cInitializerAction_0; }
		
		//entityId='Initializer'
		public Assignment getEntityIdAssignment_1() { return cEntityIdAssignment_1; }
		
		//'Initializer'
		public Keyword getEntityIdInitializerKeyword_1_0() { return cEntityIdInitializerKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributesInitializer+=AttributeInitializer*
		public Assignment getAttributesInitializerAssignment_3() { return cAttributesInitializerAssignment_3; }
		
		//AttributeInitializer
		public RuleCall getAttributesInitializerAttributeInitializerParserRuleCall_3_0() { return cAttributesInitializerAttributeInitializerParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AttributeInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.AttributeInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeIdIDTerminalRuleCall_0_0 = (RuleCall)cAttributeIdAssignment_0.eContents().get(0);
		private final Assignment cAmountValueIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAmountValueIdINTTerminalRuleCall_1_0 = (RuleCall)cAmountValueIdAssignment_1.eContents().get(0);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetTargetRefParserRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		
		//AttributeInitializer:
		//	attributeId=ID amountValueId=INT? target=TargetRef;
		@Override public ParserRule getRule() { return rule; }
		
		//attributeId=ID amountValueId=INT? target=TargetRef
		public Group getGroup() { return cGroup; }
		
		//attributeId=ID
		public Assignment getAttributeIdAssignment_0() { return cAttributeIdAssignment_0; }
		
		//ID
		public RuleCall getAttributeIdIDTerminalRuleCall_0_0() { return cAttributeIdIDTerminalRuleCall_0_0; }
		
		//amountValueId=INT?
		public Assignment getAmountValueIdAssignment_1() { return cAmountValueIdAssignment_1; }
		
		//INT
		public RuleCall getAmountValueIdINTTerminalRuleCall_1_0() { return cAmountValueIdINTTerminalRuleCall_1_0; }
		
		//target=TargetRef
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//TargetRef
		public RuleCall getTargetTargetRefParserRuleCall_2_0() { return cTargetTargetRefParserRuleCall_2_0; }
	}
	public class TargetRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.TargetRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetIdIDTerminalRuleCall_0_0 = (RuleCall)cTargetIdAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationsIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationsIdLocationParserRuleCall_2_0 = (RuleCall)cLocationsIdAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLocationsIdAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLocationsIdLocationParserRuleCall_3_1_0 = (RuleCall)cLocationsIdAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TargetRef:
		//	targetId=ID '{' locationsId+=Location (',' locationsId+=Location)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//targetId=ID '{' locationsId+=Location (',' locationsId+=Location)* '}'
		public Group getGroup() { return cGroup; }
		
		//targetId=ID
		public Assignment getTargetIdAssignment_0() { return cTargetIdAssignment_0; }
		
		//ID
		public RuleCall getTargetIdIDTerminalRuleCall_0_0() { return cTargetIdIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//locationsId+=Location
		public Assignment getLocationsIdAssignment_2() { return cLocationsIdAssignment_2; }
		
		//Location
		public RuleCall getLocationsIdLocationParserRuleCall_2_0() { return cLocationsIdLocationParserRuleCall_2_0; }
		
		//(',' locationsId+=Location)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//locationsId+=Location
		public Assignment getLocationsIdAssignment_3_1() { return cLocationsIdAssignment_3_1; }
		
		//Location
		public RuleCall getLocationsIdLocationParserRuleCall_3_1_0() { return cLocationsIdLocationParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Location");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLocationIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cLocationIdRandomKeyword_0_0 = (Keyword)cLocationIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeaTypeParserRuleCall_1_1_0 = (RuleCall)cTypeaAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTypebAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTypebTypeParserRuleCall_1_3_0 = (RuleCall)cTypebAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Location:
		//	locationId='random' |
		//	'(' typea=Type ',' typeb=Type ')';
		@Override public ParserRule getRule() { return rule; }
		
		//locationId='random' | '(' typea=Type ',' typeb=Type ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//locationId='random'
		public Assignment getLocationIdAssignment_0() { return cLocationIdAssignment_0; }
		
		//'random'
		public Keyword getLocationIdRandomKeyword_0_0() { return cLocationIdRandomKeyword_0_0; }
		
		//'(' typea=Type ',' typeb=Type ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//typea=Type
		public Assignment getTypeaAssignment_1_1() { return cTypeaAssignment_1_1; }
		
		//Type
		public RuleCall getTypeaTypeParserRuleCall_1_1_0() { return cTypeaTypeParserRuleCall_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//typeb=Type
		public Assignment getTypebAssignment_1_3() { return cTypebAssignment_1_3; }
		
		//Type
		public RuleCall getTypebTypeParserRuleCall_1_3_0() { return cTypebTypeParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}
	
	
	private final ModelElements pModel;
	private final GameMapElements pGameMap;
	private final AttributeElements pAttribute;
	private final EntityElements pEntity;
	private final DynamicEntityElements pDynamicEntity;
	private final StaticEntityElements pStaticEntity;
	private final CharacterElements pCharacter;
	private final TypeElements pType;
	private final VECTORElements pVECTOR;
	private final INTORDECElements pINTORDEC;
	private final CharTypeElements pCharType;
	private final ObjectElements pObject;
	private final BehaviourElements pBehaviour;
	private final PathfindingElements pPathfinding;
	private final BooleanExpressionElements pBooleanExpression;
	private final ExpressionElements pExpression;
	private final TerminalExpressionElements pTerminalExpression;
	private final ConditionElements pCondition;
	private final DECIMALElements pDECIMAL;
	private final ReferenceCharacterElements pReferenceCharacter;
	private final CompOperatorElements pCompOperator;
	private final ActionElements pAction;
	private final CharDecElements pCharDec;
	private final CharacterAttrElements pCharacterAttr;
	private final LogicOperatorElements pLogicOperator;
	private final AttackElements pAttack;
	private final AttributeAttackElements pAttributeAttack;
	private final AttributeTypeAttackElements pAttributeTypeAttack;
	private final BulletElements pBullet;
	private final InitializerElements pInitializer;
	private final AttributeInitializerElements pAttributeInitializer;
	private final TargetRefElements pTargetRef;
	private final LocationElements pLocation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GameGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGameMap = new GameMapElements();
		this.pAttribute = new AttributeElements();
		this.pEntity = new EntityElements();
		this.pDynamicEntity = new DynamicEntityElements();
		this.pStaticEntity = new StaticEntityElements();
		this.pCharacter = new CharacterElements();
		this.pType = new TypeElements();
		this.pVECTOR = new VECTORElements();
		this.pINTORDEC = new INTORDECElements();
		this.pCharType = new CharTypeElements();
		this.pObject = new ObjectElements();
		this.pBehaviour = new BehaviourElements();
		this.pPathfinding = new PathfindingElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pTerminalExpression = new TerminalExpressionElements();
		this.pCondition = new ConditionElements();
		this.pDECIMAL = new DECIMALElements();
		this.pReferenceCharacter = new ReferenceCharacterElements();
		this.pCompOperator = new CompOperatorElements();
		this.pAction = new ActionElements();
		this.pCharDec = new CharDecElements();
		this.pCharacterAttr = new CharacterAttrElements();
		this.pLogicOperator = new LogicOperatorElements();
		this.pAttack = new AttackElements();
		this.pAttributeAttack = new AttributeAttackElements();
		this.pAttributeTypeAttack = new AttributeTypeAttackElements();
		this.pBullet = new BulletElements();
		this.pInitializer = new InitializerElements();
		this.pAttributeInitializer = new AttributeInitializerElements();
		this.pTargetRef = new TargetRefElements();
		this.pLocation = new LocationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("master.mdsd.Game".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} 'Game' '{' entities+=Entity* '}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//GameMap:
	//	entityId='Map' '{' attributeList+=Attribute* '}';
	public GameMapElements getGameMapAccess() {
		return pGameMap;
	}
	
	public ParserRule getGameMapRule() {
		return getGameMapAccess().getRule();
	}
	
	//Attribute:
	//	{Attribute} attributename=ID type=Type;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Entity:
	//	DynamicEntity | StaticEntity;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//DynamicEntity:
	//	Character | Object | Behaviour;
	public DynamicEntityElements getDynamicEntityAccess() {
		return pDynamicEntity;
	}
	
	public ParserRule getDynamicEntityRule() {
		return getDynamicEntityAccess().getRule();
	}
	
	//StaticEntity:
	//	GameMap | Initializer;
	public StaticEntityElements getStaticEntityAccess() {
		return pStaticEntity;
	}
	
	public ParserRule getStaticEntityRule() {
		return getStaticEntityAccess().getRule();
	}
	
	//Character:
	//	entityid='Character' charId=CharType name=ID '{' att+=Attribute* '}';
	public CharacterElements getCharacterAccess() {
		return pCharacter;
	}
	
	public ParserRule getCharacterRule() {
		return getCharacterAccess().getRule();
	}
	
	//Type:
	//	valueId=INTORDEC | valueId=ID | valueIdVec=VECTOR;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//VECTOR:
	//	xVal=INTORDEC yVal=INTORDEC;
	public VECTORElements getVECTORAccess() {
		return pVECTOR;
	}
	
	public ParserRule getVECTORRule() {
		return getVECTORAccess().getRule();
	}
	
	//INTORDEC:
	//	INT | DECIMAL;
	public INTORDECElements getINTORDECAccess() {
		return pINTORDEC;
	}
	
	public ParserRule getINTORDECRule() {
		return getINTORDECAccess().getRule();
	}
	
	//CharType:
	//	charTypeId=ID;
	public CharTypeElements getCharTypeAccess() {
		return pCharType;
	}
	
	public ParserRule getCharTypeRule() {
		return getCharTypeAccess().getRule();
	}
	
	//Object:
	//	entityid='Object' name=ID '{' att+=Attribute* '}';
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//Behaviour:
	//	Pathfinding | Attack | Bullet;
	public BehaviourElements getBehaviourAccess() {
		return pBehaviour;
	}
	
	public ParserRule getBehaviourRule() {
		return getBehaviourAccess().getRule();
	}
	
	//Pathfinding:
	//	entityid='Pathfinding' name=ID '{' attPathfinding+=Attribute* conditions+=Condition* '}';
	public PathfindingElements getPathfindingAccess() {
		return pPathfinding;
	}
	
	public ParserRule getPathfindingRule() {
		return getPathfindingAccess().getRule();
	}
	
	//BooleanExpression:
	//	attributeRefLeft=CharacterAttr? leftEx=Expression? operator=CompOperator attributeRefRight=CharacterAttr?
	//	(op=LogicOperator? rightEx=Expression)?;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//Expression:
	//	tm=TerminalExpression ({Operation.left=current} op=LogicOperator right=TerminalExpression)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//TerminalExpression Expression:
	//	'(' Expression ')' | {IntLiteral} value=INTORDEC
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return pTerminalExpression;
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}
	
	//Condition:
	//	'if' '(' ifCondition=BooleanExpression ')'
	//	then=Action (=> 'else' elseIfCondition=Condition)?;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//DECIMAL:
	//	INT '.' INT;
	public DECIMALElements getDECIMALAccess() {
		return pDECIMAL;
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//ReferenceCharacter:
	//	{ReferenceCharacter} characterId=[Character] | {ReferenceCharacter} targetId='self';
	public ReferenceCharacterElements getReferenceCharacterAccess() {
		return pReferenceCharacter;
	}
	
	public ParserRule getReferenceCharacterRule() {
		return getReferenceCharacterAccess().getRule();
	}
	
	//CompOperator:
	//	{LT} op='<' | {GT} op='>' | {LTE} op='<=' | {GTE} op='>=' | {EQ} op='=';
	public CompOperatorElements getCompOperatorAccess() {
		return pCompOperator;
	}
	
	public ParserRule getCompOperatorRule() {
		return getCompOperatorAccess().getRule();
	}
	
	//Action:
	//	'(' charAtt=CharacterAttr '=' charDec=CharDec? (op=LogicOperator? ex=Expression)? ')';
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//CharDec:
	//	charAttResult=CharacterAttr | val=INTORDEC;
	public CharDecElements getCharDecAccess() {
		return pCharDec;
	}
	
	public ParserRule getCharDecRule() {
		return getCharDecAccess().getRule();
	}
	
	//CharacterAttr:
	//	reference=ReferenceCharacter attributename=ID;
	public CharacterAttrElements getCharacterAttrAccess() {
		return pCharacterAttr;
	}
	
	public ParserRule getCharacterAttrRule() {
		return getCharacterAttrAccess().getRule();
	}
	
	//LogicOperator:
	//	{T} lop='*' | {A} lop='+' | {M} lop='-' | {D} lop='/';
	public LogicOperatorElements getLogicOperatorAccess() {
		return pLogicOperator;
	}
	
	public ParserRule getLogicOperatorRule() {
		return getLogicOperatorAccess().getRule();
	}
	
	//Attack:
	//	entityid='Attack' name=ID '{' attributes+=Attribute* attributesAttack+=AttributeAttack* rules+=Condition? '}';
	public AttackElements getAttackAccess() {
		return pAttack;
	}
	
	public ParserRule getAttackRule() {
		return getAttackAccess().getRule();
	}
	
	//AttributeAttack:
	//	attributeTypesAttack+=AttributeTypeAttack type+=Type?;
	public AttributeAttackElements getAttributeAttackAccess() {
		return pAttributeAttack;
	}
	
	public ParserRule getAttributeAttackRule() {
		return getAttributeAttackAccess().getRule();
	}
	
	//AttributeTypeAttack:
	//	{Ammo} 'Ammunition' | {AttS} 'Attackspeed' | {Bullet} 'Bullet' bulletRef=[Bullet];
	public AttributeTypeAttackElements getAttributeTypeAttackAccess() {
		return pAttributeTypeAttack;
	}
	
	public ParserRule getAttributeTypeAttackRule() {
		return getAttributeTypeAttackAccess().getRule();
	}
	
	//Bullet:
	//	entityid='Bullet' name=ID '{' attributesBullet+=Attribute* '}';
	public BulletElements getBulletAccess() {
		return pBullet;
	}
	
	public ParserRule getBulletRule() {
		return getBulletAccess().getRule();
	}
	
	//Initializer:
	//	{Initializer} entityId='Initializer' '{' attributesInitializer+=AttributeInitializer* '}';
	public InitializerElements getInitializerAccess() {
		return pInitializer;
	}
	
	public ParserRule getInitializerRule() {
		return getInitializerAccess().getRule();
	}
	
	//AttributeInitializer:
	//	attributeId=ID amountValueId=INT? target=TargetRef;
	public AttributeInitializerElements getAttributeInitializerAccess() {
		return pAttributeInitializer;
	}
	
	public ParserRule getAttributeInitializerRule() {
		return getAttributeInitializerAccess().getRule();
	}
	
	//TargetRef:
	//	targetId=ID '{' locationsId+=Location (',' locationsId+=Location)* '}';
	public TargetRefElements getTargetRefAccess() {
		return pTargetRef;
	}
	
	public ParserRule getTargetRefRule() {
		return getTargetRefAccess().getRule();
	}
	
	//Location:
	//	locationId='random' |
	//	'(' typea=Type ',' typeb=Type ')';
	public LocationElements getLocationAccess() {
		return pLocation;
	}
	
	public ParserRule getLocationRule() {
		return getLocationAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
