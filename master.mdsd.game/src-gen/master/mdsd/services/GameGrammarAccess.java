/*
 * generated by Xtext 2.10.0
 */
package master.mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GameGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMapAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMapMapParserRuleCall_2_0 = (RuleCall)cMapAssignment_2.eContents().get(0);
		private final Assignment cEntitiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntitiesEntityParserRuleCall_3_0 = (RuleCall)cEntitiesAssignment_3.eContents().get(0);
		private final Assignment cIniAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIniInitializerParserRuleCall_4_0 = (RuleCall)cIniAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Model:
		//	'Game' '{' map=Map entities+=Entity* ini=Initializer '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Game' '{' map=Map entities+=Entity* ini=Initializer '}'
		public Group getGroup() { return cGroup; }
		
		//'Game'
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//map=Map
		public Assignment getMapAssignment_2() { return cMapAssignment_2; }
		
		//Map
		public RuleCall getMapMapParserRuleCall_2_0() { return cMapMapParserRuleCall_2_0; }
		
		//entities+=Entity*
		public Assignment getEntitiesAssignment_3() { return cEntitiesAssignment_3; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_3_0() { return cEntitiesEntityParserRuleCall_3_0; }
		
		//ini=Initializer
		public Assignment getIniAssignment_4() { return cIniAssignment_4; }
		
		//Initializer
		public RuleCall getIniInitializerParserRuleCall_4_0() { return cIniInitializerParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEntityIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cEntityIdMapKeyword_1_0 = (Keyword)cEntityIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Map:
		//	{Map} entityId='Map' '{' attributes+=Attribute* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Map} entityId='Map' '{' attributes+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//{Map}
		public Action getMapAction_0() { return cMapAction_0; }
		
		//entityId='Map'
		public Assignment getEntityIdAssignment_1() { return cEntityIdAssignment_1; }
		
		//'Map'
		public Keyword getEntityIdMapKeyword_1_0() { return cEntityIdMapKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAttributenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributenameIDTerminalRuleCall_1_0 = (RuleCall)cAttributenameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Attribute:
		//	{Attribute} attributename=ID type+=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//{Attribute} attributename=ID type+=Type
		public Group getGroup() { return cGroup; }
		
		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }
		
		//attributename=ID
		public Assignment getAttributenameAssignment_1() { return cAttributenameAssignment_1; }
		
		//ID
		public RuleCall getAttributenameIDTerminalRuleCall_1_0() { return cAttributenameIDTerminalRuleCall_1_0; }
		
		//type+=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDynamicEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStaticEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Entity:
		//	DynamicEntity | StaticEntity;
		@Override public ParserRule getRule() { return rule; }
		
		//DynamicEntity | StaticEntity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DynamicEntity
		public RuleCall getDynamicEntityParserRuleCall_0() { return cDynamicEntityParserRuleCall_0; }
		
		//StaticEntity
		public RuleCall getStaticEntityParserRuleCall_1() { return cStaticEntityParserRuleCall_1; }
	}
	public class DynamicEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.DynamicEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cEntityidAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cEntityidCharacterKeyword_0_0_0 = (Keyword)cEntityidAssignment_0_0.eContents().get(0);
		private final Assignment cCharacterAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCharacterCharacterParserRuleCall_0_1_0 = (RuleCall)cCharacterAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cEntityidAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cEntityidObjectKeyword_1_0_0 = (Keyword)cEntityidAssignment_1_0.eContents().get(0);
		private final Assignment cObjectAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cObjectObjectParserRuleCall_1_1_0 = (RuleCall)cObjectAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cEntityidAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cEntityidBehaviourKeyword_2_0_0 = (Keyword)cEntityidAssignment_2_0.eContents().get(0);
		private final Assignment cBehaviourAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBehaviourBehaviourParserRuleCall_2_1_0 = (RuleCall)cBehaviourAssignment_2_1.eContents().get(0);
		
		//DynamicEntity:
		//	entityid='Character' character+=Character | entityid='Object' object+=Object | entityid='Behaviour'
		//	behaviour+=Behaviour;
		@Override public ParserRule getRule() { return rule; }
		
		//entityid='Character' character+=Character | entityid='Object' object+=Object | entityid='Behaviour' behaviour+=Behaviour
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//entityid='Character' character+=Character
		public Group getGroup_0() { return cGroup_0; }
		
		//entityid='Character'
		public Assignment getEntityidAssignment_0_0() { return cEntityidAssignment_0_0; }
		
		//'Character'
		public Keyword getEntityidCharacterKeyword_0_0_0() { return cEntityidCharacterKeyword_0_0_0; }
		
		//character+=Character
		public Assignment getCharacterAssignment_0_1() { return cCharacterAssignment_0_1; }
		
		//Character
		public RuleCall getCharacterCharacterParserRuleCall_0_1_0() { return cCharacterCharacterParserRuleCall_0_1_0; }
		
		//entityid='Object' object+=Object
		public Group getGroup_1() { return cGroup_1; }
		
		//entityid='Object'
		public Assignment getEntityidAssignment_1_0() { return cEntityidAssignment_1_0; }
		
		//'Object'
		public Keyword getEntityidObjectKeyword_1_0_0() { return cEntityidObjectKeyword_1_0_0; }
		
		//object+=Object
		public Assignment getObjectAssignment_1_1() { return cObjectAssignment_1_1; }
		
		//Object
		public RuleCall getObjectObjectParserRuleCall_1_1_0() { return cObjectObjectParserRuleCall_1_1_0; }
		
		//entityid='Behaviour' behaviour+=Behaviour
		public Group getGroup_2() { return cGroup_2; }
		
		//entityid='Behaviour'
		public Assignment getEntityidAssignment_2_0() { return cEntityidAssignment_2_0; }
		
		//'Behaviour'
		public Keyword getEntityidBehaviourKeyword_2_0_0() { return cEntityidBehaviourKeyword_2_0_0; }
		
		//behaviour+=Behaviour
		public Assignment getBehaviourAssignment_2_1() { return cBehaviourAssignment_2_1; }
		
		//Behaviour
		public RuleCall getBehaviourBehaviourParserRuleCall_2_1_0() { return cBehaviourBehaviourParserRuleCall_2_1_0; }
	}
	public class StaticEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.StaticEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMapParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitializerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StaticEntity:
		//	Map | Initializer;
		@Override public ParserRule getRule() { return rule; }
		
		//Map | Initializer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Map
		public RuleCall getMapParserRuleCall_0() { return cMapParserRuleCall_0; }
		
		//Initializer
		public RuleCall getInitializerParserRuleCall_1() { return cInitializerParserRuleCall_1; }
	}
	public class CharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Character");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCharAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCharCharTypeParserRuleCall_0_0 = (RuleCall)cCharAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttAttributeParserRuleCall_3_0 = (RuleCall)cAttAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Character:
		//	char=CharType name=ID '{' att+=Attribute* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//char=CharType name=ID '{' att+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//char=CharType
		public Assignment getCharAssignment_0() { return cCharAssignment_0; }
		
		//CharType
		public RuleCall getCharCharTypeParserRuleCall_0_0() { return cCharCharTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//att+=Attribute*
		public Assignment getAttAssignment_3() { return cAttAssignment_3; }
		
		//Attribute
		public RuleCall getAttAttributeParserRuleCall_3_0() { return cAttAttributeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueIdINTORDECParserRuleCall_0_0 = (RuleCall)cValueIdAssignment_0.eContents().get(0);
		private final Assignment cValueIdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueIdIDTerminalRuleCall_1_0 = (RuleCall)cValueIdAssignment_1.eContents().get(0);
		private final Assignment cValueIdAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueIdVECTORParserRuleCall_2_0 = (RuleCall)cValueIdAssignment_2.eContents().get(0);
		
		//Type:
		//	valueId=INTORDEC | valueId=ID | valueId=VECTOR;
		@Override public ParserRule getRule() { return rule; }
		
		//valueId=INTORDEC | valueId=ID | valueId=VECTOR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//valueId=INTORDEC
		public Assignment getValueIdAssignment_0() { return cValueIdAssignment_0; }
		
		//INTORDEC
		public RuleCall getValueIdINTORDECParserRuleCall_0_0() { return cValueIdINTORDECParserRuleCall_0_0; }
		
		//valueId=ID
		public Assignment getValueIdAssignment_1() { return cValueIdAssignment_1; }
		
		//ID
		public RuleCall getValueIdIDTerminalRuleCall_1_0() { return cValueIdIDTerminalRuleCall_1_0; }
		
		//valueId=VECTOR
		public Assignment getValueIdAssignment_2() { return cValueIdAssignment_2; }
		
		//VECTOR
		public RuleCall getValueIdVECTORParserRuleCall_2_0() { return cValueIdVECTORParserRuleCall_2_0; }
	}
	public class VECTORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.VECTOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTORDECParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cINTORDECParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//VECTOR:
		//	INTORDEC INTORDEC;
		@Override public ParserRule getRule() { return rule; }
		
		//INTORDEC INTORDEC
		public Group getGroup() { return cGroup; }
		
		//INTORDEC
		public RuleCall getINTORDECParserRuleCall_0() { return cINTORDECParserRuleCall_0; }
		
		//INTORDEC
		public RuleCall getINTORDECParserRuleCall_1() { return cINTORDECParserRuleCall_1; }
	}
	public class INTORDECElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.INTORDEC");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDECIMALParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//INTORDEC:
		//	INT | DECIMAL;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | DECIMAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//DECIMAL
		public RuleCall getDECIMALParserRuleCall_1() { return cDECIMALParserRuleCall_1; }
	}
	public class CharTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.CharType");
		private final Assignment cCharTypeidAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCharTypeidIDTerminalRuleCall_0 = (RuleCall)cCharTypeidAssignment.eContents().get(0);
		
		//CharType:
		//	charTypeid=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//charTypeid=ID
		public Assignment getCharTypeidAssignment() { return cCharTypeidAssignment; }
		
		//ID
		public RuleCall getCharTypeidIDTerminalRuleCall_0() { return cCharTypeidIDTerminalRuleCall_0; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttAttributeParserRuleCall_2_0 = (RuleCall)cAttAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Object:
		//	name=ID '{' att+=Attribute* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' att+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//att+=Attribute*
		public Assignment getAttAssignment_2() { return cAttAssignment_2; }
		
		//Attribute
		public RuleCall getAttAttributeParserRuleCall_2_0() { return cAttAttributeParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class BehaviourElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Behaviour");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cBehaviourTypeIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cBehaviourTypeIdPathfindingKeyword_0_0_0 = (Keyword)cBehaviourTypeIdAssignment_0_0.eContents().get(0);
		private final Assignment cPathfindingAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPathfindingPathfindingParserRuleCall_0_1_0 = (RuleCall)cPathfindingAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cBehaviourTypeIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cBehaviourTypeIdAttackKeyword_1_0_0 = (Keyword)cBehaviourTypeIdAssignment_1_0.eContents().get(0);
		private final Assignment cAttackAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttackAttackParserRuleCall_1_1_0 = (RuleCall)cAttackAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cBehaviourTypeIdAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cBehaviourTypeIdBulletKeyword_2_0_0 = (Keyword)cBehaviourTypeIdAssignment_2_0.eContents().get(0);
		private final Assignment cBulletAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBulletBulletParserRuleCall_2_1_0 = (RuleCall)cBulletAssignment_2_1.eContents().get(0);
		
		//Behaviour:
		//	behaviourTypeId='Pathfinding' pathfinding=Pathfinding | behaviourTypeId='Attack' attack=Attack |
		//	behaviourTypeId='Bullet' bullet=Bullet;
		@Override public ParserRule getRule() { return rule; }
		
		//behaviourTypeId='Pathfinding' pathfinding=Pathfinding | behaviourTypeId='Attack' attack=Attack |
		//behaviourTypeId='Bullet' bullet=Bullet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//behaviourTypeId='Pathfinding' pathfinding=Pathfinding
		public Group getGroup_0() { return cGroup_0; }
		
		//behaviourTypeId='Pathfinding'
		public Assignment getBehaviourTypeIdAssignment_0_0() { return cBehaviourTypeIdAssignment_0_0; }
		
		//'Pathfinding'
		public Keyword getBehaviourTypeIdPathfindingKeyword_0_0_0() { return cBehaviourTypeIdPathfindingKeyword_0_0_0; }
		
		//pathfinding=Pathfinding
		public Assignment getPathfindingAssignment_0_1() { return cPathfindingAssignment_0_1; }
		
		//Pathfinding
		public RuleCall getPathfindingPathfindingParserRuleCall_0_1_0() { return cPathfindingPathfindingParserRuleCall_0_1_0; }
		
		//behaviourTypeId='Attack' attack=Attack
		public Group getGroup_1() { return cGroup_1; }
		
		//behaviourTypeId='Attack'
		public Assignment getBehaviourTypeIdAssignment_1_0() { return cBehaviourTypeIdAssignment_1_0; }
		
		//'Attack'
		public Keyword getBehaviourTypeIdAttackKeyword_1_0_0() { return cBehaviourTypeIdAttackKeyword_1_0_0; }
		
		//attack=Attack
		public Assignment getAttackAssignment_1_1() { return cAttackAssignment_1_1; }
		
		//Attack
		public RuleCall getAttackAttackParserRuleCall_1_1_0() { return cAttackAttackParserRuleCall_1_1_0; }
		
		//behaviourTypeId='Bullet' bullet=Bullet
		public Group getGroup_2() { return cGroup_2; }
		
		//behaviourTypeId='Bullet'
		public Assignment getBehaviourTypeIdAssignment_2_0() { return cBehaviourTypeIdAssignment_2_0; }
		
		//'Bullet'
		public Keyword getBehaviourTypeIdBulletKeyword_2_0_0() { return cBehaviourTypeIdBulletKeyword_2_0_0; }
		
		//bullet=Bullet
		public Assignment getBulletAssignment_2_1() { return cBulletAssignment_2_1; }
		
		//Bullet
		public RuleCall getBulletBulletParserRuleCall_2_1_0() { return cBulletBulletParserRuleCall_2_1_0; }
	}
	public class PathfindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Pathfinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttPathfindingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttPathfindingAttributeParserRuleCall_2_0 = (RuleCall)cAttPathfindingAssignment_2.eContents().get(0);
		private final Assignment cRuleSetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRuleSetsRuleSetParserRuleCall_3_0 = (RuleCall)cRuleSetsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Pathfinding:
		//	name=ID '{' attPathfinding+=Attribute* ruleSets+=RuleSet* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' attPathfinding+=Attribute* ruleSets+=RuleSet* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//attPathfinding+=Attribute*
		public Assignment getAttPathfindingAssignment_2() { return cAttPathfindingAssignment_2; }
		
		//Attribute
		public RuleCall getAttPathfindingAttributeParserRuleCall_2_0() { return cAttPathfindingAttributeParserRuleCall_2_0; }
		
		//ruleSets+=RuleSet*
		public Assignment getRuleSetsAssignment_3() { return cRuleSetsAssignment_3; }
		
		//RuleSet
		public RuleCall getRuleSetsRuleSetParserRuleCall_3_0() { return cRuleSetsRuleSetParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.RuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIfIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIfIdIfKeyword_0_0 = (Keyword)cIfIdAssignment_0.eContents().get(0);
		private final Assignment cRuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRuleRuleParserRuleCall_1_0 = (RuleCall)cRuleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElseIfIdAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cElseIfIdElseifKeyword_2_0_0 = (Keyword)cElseIfIdAssignment_2_0.eContents().get(0);
		private final Assignment cElseRulesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElseRulesRuleParserRuleCall_2_1_0 = (RuleCall)cElseRulesAssignment_2_1.eContents().get(0);
		
		//RuleSet:
		//	ifId+='if' rule=Rule (elseIfId+='elseif' elseRules+=Rule)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ifId+='if' rule=Rule (elseIfId+='elseif' elseRules+=Rule)*
		public Group getGroup() { return cGroup; }
		
		//ifId+='if'
		public Assignment getIfIdAssignment_0() { return cIfIdAssignment_0; }
		
		//'if'
		public Keyword getIfIdIfKeyword_0_0() { return cIfIdIfKeyword_0_0; }
		
		//rule=Rule
		public Assignment getRuleAssignment_1() { return cRuleAssignment_1; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_1_0() { return cRuleRuleParserRuleCall_1_0; }
		
		//(elseIfId+='elseif' elseRules+=Rule)*
		public Group getGroup_2() { return cGroup_2; }
		
		//elseIfId+='elseif'
		public Assignment getElseIfIdAssignment_2_0() { return cElseIfIdAssignment_2_0; }
		
		//'elseif'
		public Keyword getElseIfIdElseifKeyword_2_0_0() { return cElseIfIdElseifKeyword_2_0_0; }
		
		//elseRules+=Rule
		public Assignment getElseRulesAssignment_2_1() { return cElseRulesAssignment_2_1; }
		
		//Rule
		public RuleCall getElseRulesRuleParserRuleCall_2_1_0() { return cElseRulesRuleParserRuleCall_2_1_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRuleSetupAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRuleSetupRuleSetupParserRuleCall_1_0 = (RuleCall)cRuleSetupAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToDoActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToDoActionActionParserRuleCall_3_0 = (RuleCall)cToDoActionAssignment_3.eContents().get(0);
		
		//Rule:
		//	'(' ruleSetup=RuleSetup ')' toDoAction=Action;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ruleSetup=RuleSetup ')' toDoAction=Action
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//ruleSetup=RuleSetup
		public Assignment getRuleSetupAssignment_1() { return cRuleSetupAssignment_1; }
		
		//RuleSetup
		public RuleCall getRuleSetupRuleSetupParserRuleCall_1_0() { return cRuleSetupRuleSetupParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//toDoAction=Action
		public Assignment getToDoActionAssignment_3() { return cToDoActionAssignment_3; }
		
		//Action
		public RuleCall getToDoActionActionParserRuleCall_3_0() { return cToDoActionActionParserRuleCall_3_0; }
	}
	public class RuleSetupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.RuleSetup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeRefLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeRefLeftReferenceCharacterParserRuleCall_0_0 = (RuleCall)cAttributeRefLeftAssignment_0.eContents().get(0);
		private final Assignment cRuleTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRuleTypeRuleTypeParserRuleCall_1_0 = (RuleCall)cRuleTypeAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorCompOperatorParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cIntAttleftAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIntAttleftIntAttParserRuleCall_3_0 = (RuleCall)cIntAttleftAssignment_3.eContents().get(0);
		private final Assignment cLoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLoLogicOperatorLoopParserRuleCall_4_0 = (RuleCall)cLoAssignment_4.eContents().get(0);
		
		//RuleSetup:
		//	attributeRefLeft=ReferenceCharacter? ruleType=RuleType operator=CompOperator intAttleft=IntAtt lo=LogicOperatorLoop?;
		@Override public ParserRule getRule() { return rule; }
		
		//attributeRefLeft=ReferenceCharacter? ruleType=RuleType operator=CompOperator intAttleft=IntAtt lo=LogicOperatorLoop?
		public Group getGroup() { return cGroup; }
		
		//attributeRefLeft=ReferenceCharacter?
		public Assignment getAttributeRefLeftAssignment_0() { return cAttributeRefLeftAssignment_0; }
		
		//ReferenceCharacter
		public RuleCall getAttributeRefLeftReferenceCharacterParserRuleCall_0_0() { return cAttributeRefLeftReferenceCharacterParserRuleCall_0_0; }
		
		//ruleType=RuleType
		public Assignment getRuleTypeAssignment_1() { return cRuleTypeAssignment_1; }
		
		//RuleType
		public RuleCall getRuleTypeRuleTypeParserRuleCall_1_0() { return cRuleTypeRuleTypeParserRuleCall_1_0; }
		
		//operator=CompOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//CompOperator
		public RuleCall getOperatorCompOperatorParserRuleCall_2_0() { return cOperatorCompOperatorParserRuleCall_2_0; }
		
		//intAttleft=IntAtt
		public Assignment getIntAttleftAssignment_3() { return cIntAttleftAssignment_3; }
		
		//IntAtt
		public RuleCall getIntAttleftIntAttParserRuleCall_3_0() { return cIntAttleftIntAttParserRuleCall_3_0; }
		
		//lo=LogicOperatorLoop?
		public Assignment getLoAssignment_4() { return cLoAssignment_4; }
		
		//LogicOperatorLoop
		public RuleCall getLoLogicOperatorLoopParserRuleCall_4_0() { return cLoLogicOperatorLoopParserRuleCall_4_0; }
	}
	public class IntAttElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.IntAtt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueINTORDECParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSelfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttrIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttrIdIDTerminalRuleCall_1_1_0 = (RuleCall)cAttrIdAssignment_1_1.eContents().get(0);
		
		//IntAtt:
		//	value=INTORDEC | 'self' attrId=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INTORDEC | 'self' attrId=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=INTORDEC
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INTORDEC
		public RuleCall getValueINTORDECParserRuleCall_0_0() { return cValueINTORDECParserRuleCall_0_0; }
		
		//'self' attrId=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'self'
		public Keyword getSelfKeyword_1_0() { return cSelfKeyword_1_0; }
		
		//attrId=ID
		public Assignment getAttrIdAssignment_1_1() { return cAttrIdAssignment_1_1; }
		
		//ID
		public RuleCall getAttrIdIDTerminalRuleCall_1_1_0() { return cAttrIdIDTerminalRuleCall_1_1_0; }
	}
	public class DECIMALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.DECIMAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DECIMAL:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class LogicOperatorLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.LogicOperatorLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLogicOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLogicOpLogicOperatorParserRuleCall_0_0 = (RuleCall)cLogicOpAssignment_0.eContents().get(0);
		private final Assignment cIntAttAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntAttIntAttParserRuleCall_1_0 = (RuleCall)cIntAttAssignment_1.eContents().get(0);
		private final Assignment cLopAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLopLogicOperatorLoopParserRuleCall_2_0 = (RuleCall)cLopAssignment_2.eContents().get(0);
		
		//LogicOperatorLoop:
		//	logicOp+=LogicOperator intAtt+=IntAtt lop+=LogicOperatorLoop?;
		@Override public ParserRule getRule() { return rule; }
		
		//logicOp+=LogicOperator intAtt+=IntAtt lop+=LogicOperatorLoop?
		public Group getGroup() { return cGroup; }
		
		//logicOp+=LogicOperator
		public Assignment getLogicOpAssignment_0() { return cLogicOpAssignment_0; }
		
		//LogicOperator
		public RuleCall getLogicOpLogicOperatorParserRuleCall_0_0() { return cLogicOpLogicOperatorParserRuleCall_0_0; }
		
		//intAtt+=IntAtt
		public Assignment getIntAttAssignment_1() { return cIntAttAssignment_1; }
		
		//IntAtt
		public RuleCall getIntAttIntAttParserRuleCall_1_0() { return cIntAttIntAttParserRuleCall_1_0; }
		
		//lop+=LogicOperatorLoop?
		public Assignment getLopAssignment_2() { return cLopAssignment_2; }
		
		//LogicOperatorLoop
		public RuleCall getLopLogicOperatorLoopParserRuleCall_2_0() { return cLopLogicOperatorLoopParserRuleCall_2_0; }
	}
	public class ReferenceCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.ReferenceCharacter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cReferenceCharacterAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cCharacterIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cCharacterIdCharacterCrossReference_0_1_0 = (CrossReference)cCharacterIdAssignment_0_1.eContents().get(0);
		private final RuleCall cCharacterIdCharacterIDTerminalRuleCall_0_1_0_1 = (RuleCall)cCharacterIdCharacterCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cReferenceCharacterAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTargetIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cTargetIdSelfKeyword_1_1_0 = (Keyword)cTargetIdAssignment_1_1.eContents().get(0);
		
		//ReferenceCharacter:
		//	{ReferenceCharacter} characterId=[Character] | {ReferenceCharacter} targetId='self';
		@Override public ParserRule getRule() { return rule; }
		
		//{ReferenceCharacter} characterId=[Character] | {ReferenceCharacter} targetId='self'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ReferenceCharacter} characterId=[Character]
		public Group getGroup_0() { return cGroup_0; }
		
		//{ReferenceCharacter}
		public Action getReferenceCharacterAction_0_0() { return cReferenceCharacterAction_0_0; }
		
		//characterId=[Character]
		public Assignment getCharacterIdAssignment_0_1() { return cCharacterIdAssignment_0_1; }
		
		//[Character]
		public CrossReference getCharacterIdCharacterCrossReference_0_1_0() { return cCharacterIdCharacterCrossReference_0_1_0; }
		
		//ID
		public RuleCall getCharacterIdCharacterIDTerminalRuleCall_0_1_0_1() { return cCharacterIdCharacterIDTerminalRuleCall_0_1_0_1; }
		
		//{ReferenceCharacter} targetId='self'
		public Group getGroup_1() { return cGroup_1; }
		
		//{ReferenceCharacter}
		public Action getReferenceCharacterAction_1_0() { return cReferenceCharacterAction_1_0; }
		
		//targetId='self'
		public Assignment getTargetIdAssignment_1_1() { return cTargetIdAssignment_1_1; }
		
		//'self'
		public Keyword getTargetIdSelfKeyword_1_1_0() { return cTargetIdSelfKeyword_1_1_0; }
	}
	public class RuleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.RuleType");
		private final Assignment cRuleTypeIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRuleTypeIdIDTerminalRuleCall_0 = (RuleCall)cRuleTypeIdAssignment.eContents().get(0);
		
		//RuleType:
		//	ruleTypeId=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ruleTypeId=ID
		public Assignment getRuleTypeIdAssignment() { return cRuleTypeIdAssignment; }
		
		//ID
		public RuleCall getRuleTypeIdIDTerminalRuleCall_0() { return cRuleTypeIdIDTerminalRuleCall_0; }
	}
	public class CompOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.CompOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLTAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cGTAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLTEAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cGTEAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cEQAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//CompOperator:
		//	{LT} '<' | {GT} '>' | {LTE} '<=' | {GTE} '>=' | {EQ} '=';
		@Override public ParserRule getRule() { return rule; }
		
		//{LT} '<' | {GT} '>' | {LTE} '<=' | {GTE} '>=' | {EQ} '='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{LT} '<'
		public Group getGroup_0() { return cGroup_0; }
		
		//{LT}
		public Action getLTAction_0_0() { return cLTAction_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_1() { return cLessThanSignKeyword_0_1; }
		
		//{GT} '>'
		public Group getGroup_1() { return cGroup_1; }
		
		//{GT}
		public Action getGTAction_1_0() { return cGTAction_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_1() { return cGreaterThanSignKeyword_1_1; }
		
		//{LTE} '<='
		public Group getGroup_2() { return cGroup_2; }
		
		//{LTE}
		public Action getLTEAction_2_0() { return cLTEAction_2_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2_1() { return cLessThanSignEqualsSignKeyword_2_1; }
		
		//{GTE} '>='
		public Group getGroup_3() { return cGroup_3; }
		
		//{GTE}
		public Action getGTEAction_3_0() { return cGTEAction_3_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3_1() { return cGreaterThanSignEqualsSignKeyword_3_1; }
		
		//{EQ} '='
		public Group getGroup_4() { return cGroup_4; }
		
		//{EQ}
		public Action getEQAction_4_0() { return cEQAction_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCharAttAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCharAttCharacterAttrParserRuleCall_1_0 = (RuleCall)cCharAttAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCharDecAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCharDecCharDecParserRuleCall_3_0 = (RuleCall)cCharDecAssignment_3.eContents().get(0);
		private final Assignment cLoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLoLogicOperatorLoopParserRuleCall_4_0 = (RuleCall)cLoAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Action:
		//	'(' charAtt=CharacterAttr '=' charDec=CharDec lo+=LogicOperatorLoop? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' charAtt=CharacterAttr '=' charDec=CharDec lo+=LogicOperatorLoop? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//charAtt=CharacterAttr
		public Assignment getCharAttAssignment_1() { return cCharAttAssignment_1; }
		
		//CharacterAttr
		public RuleCall getCharAttCharacterAttrParserRuleCall_1_0() { return cCharAttCharacterAttrParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//charDec=CharDec
		public Assignment getCharDecAssignment_3() { return cCharDecAssignment_3; }
		
		//CharDec
		public RuleCall getCharDecCharDecParserRuleCall_3_0() { return cCharDecCharDecParserRuleCall_3_0; }
		
		//lo+=LogicOperatorLoop?
		public Assignment getLoAssignment_4() { return cLoAssignment_4; }
		
		//LogicOperatorLoop
		public RuleCall getLoLogicOperatorLoopParserRuleCall_4_0() { return cLoLogicOperatorLoopParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CharDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.CharDec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCharAttResultAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCharAttResultCharacterAttrParserRuleCall_0_0 = (RuleCall)cCharAttResultAssignment_0.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValINTORDECParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//CharDec:
		//	charAttResult+=CharacterAttr | val=INTORDEC;
		@Override public ParserRule getRule() { return rule; }
		
		//charAttResult+=CharacterAttr | val=INTORDEC
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//charAttResult+=CharacterAttr
		public Assignment getCharAttResultAssignment_0() { return cCharAttResultAssignment_0; }
		
		//CharacterAttr
		public RuleCall getCharAttResultCharacterAttrParserRuleCall_0_0() { return cCharAttResultCharacterAttrParserRuleCall_0_0; }
		
		//val=INTORDEC
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//INTORDEC
		public RuleCall getValINTORDECParserRuleCall_1_0() { return cValINTORDECParserRuleCall_1_0; }
	}
	public class CharacterAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.CharacterAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferenceReferenceCharacterParserRuleCall_0_0 = (RuleCall)cReferenceAssignment_0.eContents().get(0);
		private final Assignment cAttributenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributenameIDTerminalRuleCall_1_0 = (RuleCall)cAttributenameAssignment_1.eContents().get(0);
		
		//CharacterAttr:
		//	reference=ReferenceCharacter attributename=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//reference=ReferenceCharacter attributename=ID
		public Group getGroup() { return cGroup; }
		
		//reference=ReferenceCharacter
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }
		
		//ReferenceCharacter
		public RuleCall getReferenceReferenceCharacterParserRuleCall_0_0() { return cReferenceReferenceCharacterParserRuleCall_0_0; }
		
		//attributename=ID
		public Assignment getAttributenameAssignment_1() { return cAttributenameAssignment_1; }
		
		//ID
		public RuleCall getAttributenameIDTerminalRuleCall_1_0() { return cAttributenameIDTerminalRuleCall_1_0; }
	}
	public class LogicOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.LogicOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cMAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSolidusKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//LogicOperator:
		//	{T} '*' | {A} '+' | {M} '-' | {D} '/';
		@Override public ParserRule getRule() { return rule; }
		
		//{T} '*' | {A} '+' | {M} '-' | {D} '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{T} '*'
		public Group getGroup_0() { return cGroup_0; }
		
		//{T}
		public Action getTAction_0_0() { return cTAction_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }
		
		//{A} '+'
		public Group getGroup_1() { return cGroup_1; }
		
		//{A}
		public Action getAAction_1_0() { return cAAction_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }
		
		//{M} '-'
		public Group getGroup_2() { return cGroup_2; }
		
		//{M}
		public Action getMAction_2_0() { return cMAction_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }
		
		//{D} '/'
		public Group getGroup_3() { return cGroup_3; }
		
		//{D}
		public Action getDAction_3_0() { return cDAction_3_0; }
		
		//'/'
		public Keyword getSolidusKeyword_3_1() { return cSolidusKeyword_3_1; }
	}
	public class AttackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Attack");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Assignment cAttributesAttackAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttackAttributeAttackParserRuleCall_3_0 = (RuleCall)cAttributesAttackAssignment_3.eContents().get(0);
		private final Assignment cRulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRulesRuleSetParserRuleCall_4_0 = (RuleCall)cRulesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Attack:
		//	name=ID '{' attributes+=Attribute* attributesAttack+=AttributeAttack* rules+=RuleSet? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' attributes+=Attribute* attributesAttack+=AttributeAttack* rules+=RuleSet? '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0() { return cAttributesAttributeParserRuleCall_2_0; }
		
		//attributesAttack+=AttributeAttack*
		public Assignment getAttributesAttackAssignment_3() { return cAttributesAttackAssignment_3; }
		
		//AttributeAttack
		public RuleCall getAttributesAttackAttributeAttackParserRuleCall_3_0() { return cAttributesAttackAttributeAttackParserRuleCall_3_0; }
		
		//rules+=RuleSet?
		public Assignment getRulesAssignment_4() { return cRulesAssignment_4; }
		
		//RuleSet
		public RuleCall getRulesRuleSetParserRuleCall_4_0() { return cRulesRuleSetParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AttributeAttackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.AttributeAttack");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeTypesAttackAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeTypesAttackAttributeTypeAttackParserRuleCall_0_0 = (RuleCall)cAttributeTypesAttackAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//AttributeAttack:
		//	attributeTypesAttack+=AttributeTypeAttack type+=Type?;
		@Override public ParserRule getRule() { return rule; }
		
		//attributeTypesAttack+=AttributeTypeAttack type+=Type?
		public Group getGroup() { return cGroup; }
		
		//attributeTypesAttack+=AttributeTypeAttack
		public Assignment getAttributeTypesAttackAssignment_0() { return cAttributeTypesAttackAssignment_0; }
		
		//AttributeTypeAttack
		public RuleCall getAttributeTypesAttackAttributeTypeAttackParserRuleCall_0_0() { return cAttributeTypesAttackAttributeTypeAttackParserRuleCall_0_0; }
		
		//type+=Type?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class AttributeTypeAttackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.AttributeTypeAttack");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAmmoAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAmmunitionKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttSAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAttackspeedKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBulletAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cBulletKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBulletRefAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cBulletRefBulletCrossReference_2_2_0 = (CrossReference)cBulletRefAssignment_2_2.eContents().get(0);
		private final RuleCall cBulletRefBulletIDTerminalRuleCall_2_2_0_1 = (RuleCall)cBulletRefBulletCrossReference_2_2_0.eContents().get(1);
		
		//AttributeTypeAttack:
		//	{Ammo} 'Ammunition' | {AttS} 'Attackspeed' | {Bullet} 'Bullet' bulletRef=[Bullet];
		@Override public ParserRule getRule() { return rule; }
		
		//{Ammo} 'Ammunition' | {AttS} 'Attackspeed' | {Bullet} 'Bullet' bulletRef=[Bullet]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Ammo} 'Ammunition'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Ammo}
		public Action getAmmoAction_0_0() { return cAmmoAction_0_0; }
		
		//'Ammunition'
		public Keyword getAmmunitionKeyword_0_1() { return cAmmunitionKeyword_0_1; }
		
		//{AttS} 'Attackspeed'
		public Group getGroup_1() { return cGroup_1; }
		
		//{AttS}
		public Action getAttSAction_1_0() { return cAttSAction_1_0; }
		
		//'Attackspeed'
		public Keyword getAttackspeedKeyword_1_1() { return cAttackspeedKeyword_1_1; }
		
		//{Bullet} 'Bullet' bulletRef=[Bullet]
		public Group getGroup_2() { return cGroup_2; }
		
		//{Bullet}
		public Action getBulletAction_2_0() { return cBulletAction_2_0; }
		
		//'Bullet'
		public Keyword getBulletKeyword_2_1() { return cBulletKeyword_2_1; }
		
		//bulletRef=[Bullet]
		public Assignment getBulletRefAssignment_2_2() { return cBulletRefAssignment_2_2; }
		
		//[Bullet]
		public CrossReference getBulletRefBulletCrossReference_2_2_0() { return cBulletRefBulletCrossReference_2_2_0; }
		
		//ID
		public RuleCall getBulletRefBulletIDTerminalRuleCall_2_2_0_1() { return cBulletRefBulletIDTerminalRuleCall_2_2_0_1; }
	}
	public class BulletElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Bullet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributesBulletAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesBulletAttributeParserRuleCall_2_0 = (RuleCall)cAttributesBulletAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Bullet:
		//	name=ID '{' attributesBullet+=Attribute* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' attributesBullet+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//attributesBullet+=Attribute*
		public Assignment getAttributesBulletAssignment_2() { return cAttributesBulletAssignment_2; }
		
		//Attribute
		public RuleCall getAttributesBulletAttributeParserRuleCall_2_0() { return cAttributesBulletAttributeParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class InitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Initializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitializerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEntityIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cEntityIdInitializerKeyword_1_0 = (Keyword)cEntityIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesInitializerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesInitializerAttributeInitializerParserRuleCall_3_0 = (RuleCall)cAttributesInitializerAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Initializer:
		//	{Initializer} entityId='Initializer' '{' attributesInitializer+=AttributeInitializer* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Initializer} entityId='Initializer' '{' attributesInitializer+=AttributeInitializer* '}'
		public Group getGroup() { return cGroup; }
		
		//{Initializer}
		public Action getInitializerAction_0() { return cInitializerAction_0; }
		
		//entityId='Initializer'
		public Assignment getEntityIdAssignment_1() { return cEntityIdAssignment_1; }
		
		//'Initializer'
		public Keyword getEntityIdInitializerKeyword_1_0() { return cEntityIdInitializerKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributesInitializer+=AttributeInitializer*
		public Assignment getAttributesInitializerAssignment_3() { return cAttributesInitializerAssignment_3; }
		
		//AttributeInitializer
		public RuleCall getAttributesInitializerAttributeInitializerParserRuleCall_3_0() { return cAttributesInitializerAttributeInitializerParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AttributeInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.AttributeInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeIdIDTerminalRuleCall_0_0 = (RuleCall)cAttributeIdAssignment_0.eContents().get(0);
		private final Assignment cAmountValueIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAmountValueIdINTTerminalRuleCall_1_0 = (RuleCall)cAmountValueIdAssignment_1.eContents().get(0);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetTargetRefParserRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		
		//AttributeInitializer:
		//	attributeId=ID amountValueId=INT? target+=TargetRef;
		@Override public ParserRule getRule() { return rule; }
		
		//attributeId=ID amountValueId=INT? target+=TargetRef
		public Group getGroup() { return cGroup; }
		
		//attributeId=ID
		public Assignment getAttributeIdAssignment_0() { return cAttributeIdAssignment_0; }
		
		//ID
		public RuleCall getAttributeIdIDTerminalRuleCall_0_0() { return cAttributeIdIDTerminalRuleCall_0_0; }
		
		//amountValueId=INT?
		public Assignment getAmountValueIdAssignment_1() { return cAmountValueIdAssignment_1; }
		
		//INT
		public RuleCall getAmountValueIdINTTerminalRuleCall_1_0() { return cAmountValueIdINTTerminalRuleCall_1_0; }
		
		//target+=TargetRef
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//TargetRef
		public RuleCall getTargetTargetRefParserRuleCall_2_0() { return cTargetTargetRefParserRuleCall_2_0; }
	}
	public class TargetRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.TargetRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetIdIDTerminalRuleCall_0_0 = (RuleCall)cTargetIdAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationsIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationsIdLocationParserRuleCall_2_0 = (RuleCall)cLocationsIdAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLocationsIdAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLocationsIdLocationParserRuleCall_3_1_0 = (RuleCall)cLocationsIdAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TargetRef:
		//	targetId=ID '{' locationsId+=Location (',' locationsId+=Location)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//targetId=ID '{' locationsId+=Location (',' locationsId+=Location)* '}'
		public Group getGroup() { return cGroup; }
		
		//targetId=ID
		public Assignment getTargetIdAssignment_0() { return cTargetIdAssignment_0; }
		
		//ID
		public RuleCall getTargetIdIDTerminalRuleCall_0_0() { return cTargetIdIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//locationsId+=Location
		public Assignment getLocationsIdAssignment_2() { return cLocationsIdAssignment_2; }
		
		//Location
		public RuleCall getLocationsIdLocationParserRuleCall_2_0() { return cLocationsIdLocationParserRuleCall_2_0; }
		
		//(',' locationsId+=Location)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//locationsId+=Location
		public Assignment getLocationsIdAssignment_3_1() { return cLocationsIdAssignment_3_1; }
		
		//Location
		public RuleCall getLocationsIdLocationParserRuleCall_3_1_0() { return cLocationsIdLocationParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "master.mdsd.Game.Location");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLocationIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cLocationIdRandomKeyword_0_0 = (Keyword)cLocationIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeaTypeParserRuleCall_1_1_0 = (RuleCall)cTypeaAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTypebAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTypebTypeParserRuleCall_1_3_0 = (RuleCall)cTypebAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cCharAttAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cCharAttAttributeParserRuleCall_2_0_0 = (RuleCall)cCharAttAssignment_2_0.eContents().get(0);
		private final Assignment cLogicOpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLogicOpLogicOperatorParserRuleCall_2_1_0 = (RuleCall)cLogicOpAssignment_2_1.eContents().get(0);
		private final Assignment cTypecAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTypecTypeParserRuleCall_2_2_0 = (RuleCall)cTypecAssignment_2_2.eContents().get(0);
		
		//Location:
		//	locationId='random' |
		//	'(' typea=Type ',' typeb=Type ')' | charAtt+=Attribute logicOp+=LogicOperator typec+=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//locationId='random' | '(' typea=Type ',' typeb=Type ')' | charAtt+=Attribute logicOp+=LogicOperator typec+=Type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//locationId='random'
		public Assignment getLocationIdAssignment_0() { return cLocationIdAssignment_0; }
		
		//'random'
		public Keyword getLocationIdRandomKeyword_0_0() { return cLocationIdRandomKeyword_0_0; }
		
		//'(' typea=Type ',' typeb=Type ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//typea=Type
		public Assignment getTypeaAssignment_1_1() { return cTypeaAssignment_1_1; }
		
		//Type
		public RuleCall getTypeaTypeParserRuleCall_1_1_0() { return cTypeaTypeParserRuleCall_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//typeb=Type
		public Assignment getTypebAssignment_1_3() { return cTypebAssignment_1_3; }
		
		//Type
		public RuleCall getTypebTypeParserRuleCall_1_3_0() { return cTypebTypeParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//charAtt+=Attribute logicOp+=LogicOperator typec+=Type
		public Group getGroup_2() { return cGroup_2; }
		
		//charAtt+=Attribute
		public Assignment getCharAttAssignment_2_0() { return cCharAttAssignment_2_0; }
		
		//Attribute
		public RuleCall getCharAttAttributeParserRuleCall_2_0_0() { return cCharAttAttributeParserRuleCall_2_0_0; }
		
		//logicOp+=LogicOperator
		public Assignment getLogicOpAssignment_2_1() { return cLogicOpAssignment_2_1; }
		
		//LogicOperator
		public RuleCall getLogicOpLogicOperatorParserRuleCall_2_1_0() { return cLogicOpLogicOperatorParserRuleCall_2_1_0; }
		
		//typec+=Type
		public Assignment getTypecAssignment_2_2() { return cTypecAssignment_2_2; }
		
		//Type
		public RuleCall getTypecTypeParserRuleCall_2_2_0() { return cTypecTypeParserRuleCall_2_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final MapElements pMap;
	private final AttributeElements pAttribute;
	private final EntityElements pEntity;
	private final DynamicEntityElements pDynamicEntity;
	private final StaticEntityElements pStaticEntity;
	private final CharacterElements pCharacter;
	private final TypeElements pType;
	private final VECTORElements pVECTOR;
	private final INTORDECElements pINTORDEC;
	private final CharTypeElements pCharType;
	private final ObjectElements pObject;
	private final BehaviourElements pBehaviour;
	private final PathfindingElements pPathfinding;
	private final RuleSetElements pRuleSet;
	private final RuleElements pRule;
	private final RuleSetupElements pRuleSetup;
	private final IntAttElements pIntAtt;
	private final DECIMALElements pDECIMAL;
	private final LogicOperatorLoopElements pLogicOperatorLoop;
	private final ReferenceCharacterElements pReferenceCharacter;
	private final RuleTypeElements pRuleType;
	private final CompOperatorElements pCompOperator;
	private final ActionElements pAction;
	private final CharDecElements pCharDec;
	private final CharacterAttrElements pCharacterAttr;
	private final LogicOperatorElements pLogicOperator;
	private final AttackElements pAttack;
	private final AttributeAttackElements pAttributeAttack;
	private final AttributeTypeAttackElements pAttributeTypeAttack;
	private final BulletElements pBullet;
	private final InitializerElements pInitializer;
	private final AttributeInitializerElements pAttributeInitializer;
	private final TargetRefElements pTargetRef;
	private final LocationElements pLocation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GameGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pMap = new MapElements();
		this.pAttribute = new AttributeElements();
		this.pEntity = new EntityElements();
		this.pDynamicEntity = new DynamicEntityElements();
		this.pStaticEntity = new StaticEntityElements();
		this.pCharacter = new CharacterElements();
		this.pType = new TypeElements();
		this.pVECTOR = new VECTORElements();
		this.pINTORDEC = new INTORDECElements();
		this.pCharType = new CharTypeElements();
		this.pObject = new ObjectElements();
		this.pBehaviour = new BehaviourElements();
		this.pPathfinding = new PathfindingElements();
		this.pRuleSet = new RuleSetElements();
		this.pRule = new RuleElements();
		this.pRuleSetup = new RuleSetupElements();
		this.pIntAtt = new IntAttElements();
		this.pDECIMAL = new DECIMALElements();
		this.pLogicOperatorLoop = new LogicOperatorLoopElements();
		this.pReferenceCharacter = new ReferenceCharacterElements();
		this.pRuleType = new RuleTypeElements();
		this.pCompOperator = new CompOperatorElements();
		this.pAction = new ActionElements();
		this.pCharDec = new CharDecElements();
		this.pCharacterAttr = new CharacterAttrElements();
		this.pLogicOperator = new LogicOperatorElements();
		this.pAttack = new AttackElements();
		this.pAttributeAttack = new AttributeAttackElements();
		this.pAttributeTypeAttack = new AttributeTypeAttackElements();
		this.pBullet = new BulletElements();
		this.pInitializer = new InitializerElements();
		this.pAttributeInitializer = new AttributeInitializerElements();
		this.pTargetRef = new TargetRefElements();
		this.pLocation = new LocationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("master.mdsd.Game".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'Game' '{' map=Map entities+=Entity* ini=Initializer '}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Map:
	//	{Map} entityId='Map' '{' attributes+=Attribute* '}';
	public MapElements getMapAccess() {
		return pMap;
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}
	
	//Attribute:
	//	{Attribute} attributename=ID type+=Type;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Entity:
	//	DynamicEntity | StaticEntity;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//DynamicEntity:
	//	entityid='Character' character+=Character | entityid='Object' object+=Object | entityid='Behaviour'
	//	behaviour+=Behaviour;
	public DynamicEntityElements getDynamicEntityAccess() {
		return pDynamicEntity;
	}
	
	public ParserRule getDynamicEntityRule() {
		return getDynamicEntityAccess().getRule();
	}
	
	//StaticEntity:
	//	Map | Initializer;
	public StaticEntityElements getStaticEntityAccess() {
		return pStaticEntity;
	}
	
	public ParserRule getStaticEntityRule() {
		return getStaticEntityAccess().getRule();
	}
	
	//Character:
	//	char=CharType name=ID '{' att+=Attribute* '}';
	public CharacterElements getCharacterAccess() {
		return pCharacter;
	}
	
	public ParserRule getCharacterRule() {
		return getCharacterAccess().getRule();
	}
	
	//Type:
	//	valueId=INTORDEC | valueId=ID | valueId=VECTOR;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//VECTOR:
	//	INTORDEC INTORDEC;
	public VECTORElements getVECTORAccess() {
		return pVECTOR;
	}
	
	public ParserRule getVECTORRule() {
		return getVECTORAccess().getRule();
	}
	
	//INTORDEC:
	//	INT | DECIMAL;
	public INTORDECElements getINTORDECAccess() {
		return pINTORDEC;
	}
	
	public ParserRule getINTORDECRule() {
		return getINTORDECAccess().getRule();
	}
	
	//CharType:
	//	charTypeid=ID;
	public CharTypeElements getCharTypeAccess() {
		return pCharType;
	}
	
	public ParserRule getCharTypeRule() {
		return getCharTypeAccess().getRule();
	}
	
	//Object:
	//	name=ID '{' att+=Attribute* '}';
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//Behaviour:
	//	behaviourTypeId='Pathfinding' pathfinding=Pathfinding | behaviourTypeId='Attack' attack=Attack |
	//	behaviourTypeId='Bullet' bullet=Bullet;
	public BehaviourElements getBehaviourAccess() {
		return pBehaviour;
	}
	
	public ParserRule getBehaviourRule() {
		return getBehaviourAccess().getRule();
	}
	
	//Pathfinding:
	//	name=ID '{' attPathfinding+=Attribute* ruleSets+=RuleSet* '}';
	public PathfindingElements getPathfindingAccess() {
		return pPathfinding;
	}
	
	public ParserRule getPathfindingRule() {
		return getPathfindingAccess().getRule();
	}
	
	//RuleSet:
	//	ifId+='if' rule=Rule (elseIfId+='elseif' elseRules+=Rule)*;
	public RuleSetElements getRuleSetAccess() {
		return pRuleSet;
	}
	
	public ParserRule getRuleSetRule() {
		return getRuleSetAccess().getRule();
	}
	
	//Rule:
	//	'(' ruleSetup=RuleSetup ')' toDoAction=Action;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//RuleSetup:
	//	attributeRefLeft=ReferenceCharacter? ruleType=RuleType operator=CompOperator intAttleft=IntAtt lo=LogicOperatorLoop?;
	public RuleSetupElements getRuleSetupAccess() {
		return pRuleSetup;
	}
	
	public ParserRule getRuleSetupRule() {
		return getRuleSetupAccess().getRule();
	}
	
	//IntAtt:
	//	value=INTORDEC | 'self' attrId=ID;
	public IntAttElements getIntAttAccess() {
		return pIntAtt;
	}
	
	public ParserRule getIntAttRule() {
		return getIntAttAccess().getRule();
	}
	
	//DECIMAL:
	//	INT '.' INT;
	public DECIMALElements getDECIMALAccess() {
		return pDECIMAL;
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//LogicOperatorLoop:
	//	logicOp+=LogicOperator intAtt+=IntAtt lop+=LogicOperatorLoop?;
	public LogicOperatorLoopElements getLogicOperatorLoopAccess() {
		return pLogicOperatorLoop;
	}
	
	public ParserRule getLogicOperatorLoopRule() {
		return getLogicOperatorLoopAccess().getRule();
	}
	
	//ReferenceCharacter:
	//	{ReferenceCharacter} characterId=[Character] | {ReferenceCharacter} targetId='self';
	public ReferenceCharacterElements getReferenceCharacterAccess() {
		return pReferenceCharacter;
	}
	
	public ParserRule getReferenceCharacterRule() {
		return getReferenceCharacterAccess().getRule();
	}
	
	//RuleType:
	//	ruleTypeId=ID;
	public RuleTypeElements getRuleTypeAccess() {
		return pRuleType;
	}
	
	public ParserRule getRuleTypeRule() {
		return getRuleTypeAccess().getRule();
	}
	
	//CompOperator:
	//	{LT} '<' | {GT} '>' | {LTE} '<=' | {GTE} '>=' | {EQ} '=';
	public CompOperatorElements getCompOperatorAccess() {
		return pCompOperator;
	}
	
	public ParserRule getCompOperatorRule() {
		return getCompOperatorAccess().getRule();
	}
	
	//Action:
	//	'(' charAtt=CharacterAttr '=' charDec=CharDec lo+=LogicOperatorLoop? ')';
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//CharDec:
	//	charAttResult+=CharacterAttr | val=INTORDEC;
	public CharDecElements getCharDecAccess() {
		return pCharDec;
	}
	
	public ParserRule getCharDecRule() {
		return getCharDecAccess().getRule();
	}
	
	//CharacterAttr:
	//	reference=ReferenceCharacter attributename=ID;
	public CharacterAttrElements getCharacterAttrAccess() {
		return pCharacterAttr;
	}
	
	public ParserRule getCharacterAttrRule() {
		return getCharacterAttrAccess().getRule();
	}
	
	//LogicOperator:
	//	{T} '*' | {A} '+' | {M} '-' | {D} '/';
	public LogicOperatorElements getLogicOperatorAccess() {
		return pLogicOperator;
	}
	
	public ParserRule getLogicOperatorRule() {
		return getLogicOperatorAccess().getRule();
	}
	
	//Attack:
	//	name=ID '{' attributes+=Attribute* attributesAttack+=AttributeAttack* rules+=RuleSet? '}';
	public AttackElements getAttackAccess() {
		return pAttack;
	}
	
	public ParserRule getAttackRule() {
		return getAttackAccess().getRule();
	}
	
	//AttributeAttack:
	//	attributeTypesAttack+=AttributeTypeAttack type+=Type?;
	public AttributeAttackElements getAttributeAttackAccess() {
		return pAttributeAttack;
	}
	
	public ParserRule getAttributeAttackRule() {
		return getAttributeAttackAccess().getRule();
	}
	
	//AttributeTypeAttack:
	//	{Ammo} 'Ammunition' | {AttS} 'Attackspeed' | {Bullet} 'Bullet' bulletRef=[Bullet];
	public AttributeTypeAttackElements getAttributeTypeAttackAccess() {
		return pAttributeTypeAttack;
	}
	
	public ParserRule getAttributeTypeAttackRule() {
		return getAttributeTypeAttackAccess().getRule();
	}
	
	//Bullet:
	//	name=ID '{' attributesBullet+=Attribute* '}';
	public BulletElements getBulletAccess() {
		return pBullet;
	}
	
	public ParserRule getBulletRule() {
		return getBulletAccess().getRule();
	}
	
	//Initializer:
	//	{Initializer} entityId='Initializer' '{' attributesInitializer+=AttributeInitializer* '}';
	public InitializerElements getInitializerAccess() {
		return pInitializer;
	}
	
	public ParserRule getInitializerRule() {
		return getInitializerAccess().getRule();
	}
	
	//AttributeInitializer:
	//	attributeId=ID amountValueId=INT? target+=TargetRef;
	public AttributeInitializerElements getAttributeInitializerAccess() {
		return pAttributeInitializer;
	}
	
	public ParserRule getAttributeInitializerRule() {
		return getAttributeInitializerAccess().getRule();
	}
	
	//TargetRef:
	//	targetId=ID '{' locationsId+=Location (',' locationsId+=Location)* '}';
	public TargetRefElements getTargetRefAccess() {
		return pTargetRef;
	}
	
	public ParserRule getTargetRefRule() {
		return getTargetRefAccess().getRule();
	}
	
	//Location:
	//	locationId='random' |
	//	'(' typea=Type ',' typeb=Type ')' | charAtt+=Attribute logicOp+=LogicOperator typec+=Type;
	public LocationElements getLocationAccess() {
		return pLocation;
	}
	
	public ParserRule getLocationRule() {
		return getLocationAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
