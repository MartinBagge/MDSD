/*
 * generated by Xtext 2.10.0
 */
package master.mdsd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import master.mdsd.game.Character
import master.mdsd.game.Pathfinding
import master.mdsd.game.Object
import master.mdsd.game.Attack
import master.mdsd.game.Bullet
import java.util.Map
import master.mdsd.game.Entity
import master.mdsd.game.DynamicEntity
import master.mdsd.game.StaticEntity
import master.mdsd.game.GameMap
import master.mdsd.game.Initializer
import java.util.List
import master.mdsd.game.Behaviour
import master.mdsd.game.IntLiteral
import master.mdsd.game.Expression

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GameGenerator extends AbstractGenerator {
	
	private CharSequence all = ""

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		createAll(resource, fsa)
		
		fsa.generateFile('game.py',all)
	}
	
	def createAll(Resource resource, IFileSystemAccess2 fsa) {
		//fsa.generateFile('lib.py',addMaster())
		
		//all = addImport()
		
		//resource.allContents.filter(Character).forEach[createCharacter()]
		//resource.allContents.filter(Object).forEach[createObject()]
		//resource.allContents.filter(Pathfinding).forEach[createPathfinding()]
		//resource.allContents.filter(Attack).forEach[createAttack()]
		//resource.allContents.filter(Bullet).forEach[createBullet()]
		
		//all = all.toString() + addScript(resource)
		
		resource.allContents.filter(DynamicEntity).forEach[createEntityFile()]
		resource.allContents.filter(StaticEntity).forEach[createEntityFile()]
		
		
		fsa.generateFile('game.py', all)
	}
	
	def dispatch createEntityFile(StaticEntity entity){
			all = all.toString() + createEntity(entity)
	}
	
	def dispatch createEntityFile(DynamicEntity entity){
		all = all.toString() + createEntity(entity)
	}
	
	def dispatch createEntity(StaticEntity entity)'''
		class «entity.entityId»():
			«IF entity.entityId.equals('Map')»
			attributes = «createMap(entity as GameMap)»
			«ELSEIF entity.entityId.equals('Initializer')»
			attributes = «createInitializer(entity as Initializer)»
			«ENDIF»
			
	'''
	
	
	def Map createMap(GameMap gameMap){
		var Map attributes = newHashMap
			for(a : gameMap.attributeList){
				if(a.type.valueIdVec != null){
					attributes.put(a.attributename, #[a.type.valueIdVec.XVal, a.type.valueIdVec.YVal])
				}else{
					attributes.put(a.attributename, a.type.valueId)
				}
			}
		return attributes;
	}
	
	def Map createInitializer(Initializer init){
		var Map attributes = newHashMap
		var value = 0
			for(a : init.attributesInitializer){
				if(a.attributeId.equals('spawn')){
					if(a.amountValueId == 0){
						value = 1
					}else{
						value = a.amountValueId
					}
					var List locations = newArrayList
					locations.add(value)
					for(e : a.target.locationsId){
						if(e.locationId != null){
							locations.add(e.locationId)
						}else{
							locations.add(#[e.typea.valueId, e.typeb.valueId])
						}
					}
					attributes.put(a.target.targetId, locations)
				}
			}
			
		return attributes;
	}
	
	def dispatch createEntity(DynamicEntity entity)'''
		class «entity.name»():
			«IF entity.entityid.equals('Character')»
			attributes = «createCharacter(entity as Character)»
			«ELSEIF entity.entityid.equals('Object')»
			attributes = «createObject(entity as Object)»
			«ELSEIF entity.entityid.equals('Pathfinding')»
			attributes = «createPathfinding(entity as Pathfinding)»
			
			def pathfinding():
				«createPathfindingFunc(entity as Pathfinding)»
			«ELSEIF entity.entityid.equals('Attack')»
			attributes = «createAttack(entity as Attack)»
			«ELSEIF entity.entityid.equals('Bullet')»
			attributes = «createBullet(entity as Bullet)»
			«ENDIF»
			
	'''
	
	def Map createCharacter(Character character){
		var Map attributes = newHashMap
		for(a:character.att){
			if(a.type.valueIdVec != null){
				attributes.put(a.attributename, #[a.type.valueIdVec.XVal, a.type.valueIdVec.YVal])
			}else{
				attributes.put(a.attributename, a.type.valueId)
			}
		}
		return attributes;
	}
	
	def Map createObject(Object object){
		var Map attributes = newHashMap
		for(a:object.att){
			if(a.type.valueIdVec != null){
				attributes.put(a.attributename, #[a.type.valueIdVec.XVal, a.type.valueIdVec.YVal])
			}else{
				attributes.put(a.attributename, a.type.valueId)
			}
		}
		return attributes;
	}
	
	def Map createPathfinding(Pathfinding pathfinding){
		var Map attributes = newHashMap
		for(a:pathfinding.attPathfinding){
			if(a.type.valueIdVec != null){
				attributes.put(a.attributename, #[a.type.valueIdVec.XVal, a.type.valueIdVec.YVal])
			}else{
				attributes.put(a.attributename, a.type.valueId)
			}
		}
		return attributes;
		
		/* 
		FOR ruleSet : pathfinding.ruleSets
			def checkCondition():
				if ruleSet.rule.ruleSetup.attributeRefLeft.ruleSet.rule.ruleSetup.ruleType ruleSet.rule.ruleSetup.operator ruleSet.rule.ruleSetup.intAttleft:
					self.«ruleSet.rule.toDoAction.charAtt = ruleSet.rule.toDoAction.charDec ruleSet.rule.toDoAction.lo
			ENDFOR
			*/
	}
	
	def Map createAttack(Attack attack){
		var Map attributes = newHashMap
				for(a:attack.attributes){
					if(a.type.valueIdVec != null){
						attributes.put(a.attributename, #[a.type.valueIdVec.XVal, a.type.valueIdVec.YVal])
					}else{
						attributes.put(a.attributename, a.type.valueId)
					}
				}
				return attributes;
	}
	
	def Map createBullet(Bullet bullet){
		var Map attributes = newHashMap
				for(a:bullet.attributesBullet){
					if(a.type.valueIdVec != null){
						attributes.put(a.attributename, #[a.type.valueIdVec.XVal, a.type.valueIdVec.YVal])
					}else{
						attributes.put(a.attributename, a.type.valueId)
					}
				}
				return attributes;
	}
	
	def createPathfindingFunc(Pathfinding pathfinding)'''
		«FOR con : pathfinding.conditions»
			if «IF con.ifCondition.attributeRefLeft !=null»
			«IF con.ifCondition.attributeRefLeft.reference.characterId != null»«con.ifCondition.attributeRefLeft.reference.characterId.name».
				«ENDIF»
			«IF con.ifCondition.attributeRefLeft.reference.targetId != null»«con.ifCondition.attributeRefLeft.reference.targetId».
			«ENDIF»«con.ifCondition.attributeRefLeft.attributename»
			«ENDIF» 
			«IF con.ifCondition.leftEx !=null»«expression(con.ifCondition.leftEx)»
			«ENDIF» 
			 «con.ifCondition.operator.op» 
			
			
			
			
			«IF con.ifCondition.attributeRefRight !=null»
				«IF con.ifCondition.attributeRefRight.reference.characterId != null»
					«con.ifCondition.attributeRefRight.reference.characterId.name»
				«ENDIF»
				«IF con.ifCondition.attributeRefRight.reference.targetId != null»
					«con.ifCondition.attributeRefRight.reference.targetId»
				«ENDIF»
				«con.ifCondition.attributeRefRight.attributename»
				«ENDIF»
				«IF con.ifCondition.rightEx !=null» 
					«IF con.ifCondition.op != null»
			«con.ifCondition.op.lop»
					«ENDIF»
			 «expression(con.ifCondition.rightEx)»
				«ENDIF» 
		«ENDFOR»
	'''
	
	def dispatch expression(Expression i)'''
		«expression(i.tm)»
	'''
	
	def dispatch expression(IntLiteral i)'''
		«i.value»
	'''

	
	/* 
	
	def createPathfinding(Pathfinding pathfinding) {
		all = all.toString() + addPathfinding(pathfinding)
	}
	
	def createAttack(Attack attack) {
		all = all.toString() + addAttack(attack)
	}
	
	def createBullet(Bullet bullet) {
		all = all.toString() + addBullet(bullet)
	}
	
	def createCharacter(Character character) {
		all = all.toString() + addCharacter(character)
	}
	
	def createObject(Object object) {
		all = all.toString() + addObject(object)
	}
	
	
	
	def addImport()'''
		from lib import *
		
	'''
	
	def addPathfinding(Pathfinding pathfinding)'''
		class «pathfinding.name»():
		«/*»
			«FOR ruleSet : pathfinding.ruleSets»
			def checkCondition():
				if «ruleSet.rule.ruleSetup.attributeRefLeft».«ruleSet.rule.ruleSetup.ruleType» «ruleSet.rule.ruleSetup.operator» «ruleSet.rule.ruleSetup.intAttleft»:
					self.«ruleSet.rule.toDoAction.charAtt» = «ruleSet.rule.toDoAction.charDec»«ruleSet.rule.toDoAction.lo»
			«ENDFOR»
			
			
	'''
	
	def addAttack(Attack attack)'''
		class «attack.name»():
		
	'''
	
	def addBullet(Bullet bullet)'''
		class «bullet.name»():
			
		
	'''
	
	def addCharacter(Character character) '''
		class «character.name»():
			attr = «attrToCharacter(character)»
		
	'''
	
	def Map attrToCharacter(Character character){
		var Map attributes = newHashMap
			for(a : character.att){
				if(a.type.valueIdVec != null){
					attributes.put(a.attributename, #[a.type.valueIdVec.XVal, a.type.valueIdVec.YVal])
				}else{
					attributes.put(a.attributename, a.type.valueId)
				}
			}
		return attributes;
	}
	
	def addObject(Object object)'''
		class «object.name»():
		
	'''
	
	def addScript(Resource resource)'''
		player = «»(«attrToCharacter(resource, 'Player')»)
	'''
	
	def Map attrToCharacter(Resource resource, String type){
		var Map attributes = newHashMap
		for (e : resource.allContents.filter(Character).toIterable()){
			if (e.charId.charTypeId.equals('Player')){
				for(a:e.att){
					if(a.type.valueIdVec != null){
						attributes.put(a.attributename, #[a.type.valueIdVec.XVal, a.type.valueIdVec.YVal])
					}else{
						attributes.put(a.attributename, a.type.valueId)
					}
				}
			}
		}
		return attributes;
	}
	
	
	// «IF ruleSet.rule.ruleSetup.attributeRefLeft != null»«»«ENDIF»
	*/
}
