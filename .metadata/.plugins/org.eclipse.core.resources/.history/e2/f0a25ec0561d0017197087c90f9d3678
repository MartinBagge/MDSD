/*

 * generated by Xtext 2.10.0

 */

package master.mdsd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import master.mdsd.game.Character
import master.mdsd.game.Pathfinding
import master.mdsd.game.Object
import master.mdsd.game.Attack
import master.mdsd.game.Bullet

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GameGenerator extends AbstractGenerator {
	
	private CharSequence all

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
		
		createAll(resource)
		
		fsa.generateFile('game.py',all)
	}
	
	def createAll(Resource resource) {
		all = addMaster()
		resource.allContents.filter(Character).forEach[createCharacter()]
		resource.allContents.filter(Object).forEach[createObject()]
		resource.allContents.filter(Pathfinding).forEach[createPathfinding()]
		resource.allContents.filter(Attack).forEach[createAttack()]
		resource.allContents.filter(Bullet).forEach[createBullet()]
		
		all = all.toString() + addScript()
		
	}
	
	def createPathfinding(Pathfinding pathfinding) {
		all = all.toString() + addPathfinding(pathfinding)
	}
	
	def createAttack(Attack attack) {
		all = all.toString() + addAttack(attack)
	}
	
	def createBullet(Bullet bullet) {
		all = all.toString() + addBullet(bullet)
	}
	
	def createCharacter(Character character) {
		all = all.toString() + addCharacter(character)
	}
	
	def createObject(Object object) {
		all = all.toString() + addObject(object)
	}
	
	
	def addMaster() '''
		class master(object):
			def __init__(self, attrs):
				self.attrs = attrs
		
		class entity(master):
			def set_type(self,type):
				self.type = type
		
	'''
	
	def addPathfinding(Pathfinding pathfinding)'''
		class «pathfinding.name»(entity):
		«/*»
			«FOR ruleSet : pathfinding.ruleSets»
			def checkCondition():
				if «ruleSet.rule.ruleSetup.attributeRefLeft».«ruleSet.rule.ruleSetup.ruleType» «ruleSet.rule.ruleSetup.operator» «ruleSet.rule.ruleSetup.intAttleft»:
					self.«ruleSet.rule.toDoAction.charAtt» = «ruleSet.rule.toDoAction.charDec»«ruleSet.rule.toDoAction.lo»
			«ENDFOR»
			
			*/»
	'''
	
	def addAttack(Attack attack)'''
		class «attack.name»(entity):
		
	'''
	
	def addBullet(Bullet bullet)'''
		class «bullet.name»(entity)>
		
	'''
	
	def addCharacter(Character character) '''
		class «character.name»(entity):
		
	'''
	
	def addObject(Object object)'''
		class «object.name»(entity):
		
	'''
	
	def addScript()'''
		
	'''
		
	
	// «IF ruleSet.rule.ruleSetup.attributeRefLeft != null»«»«ENDIF»
	
}


	