/*
 * generated by Xtext 2.10.0
 */
package master.mdsd.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import master.mdsd.ide.contentassist.antlr.internal.InternalGameParser;
import master.mdsd.services.GameGrammarAccess;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class GameParser extends AbstractContentAssistParser {

	@Inject
	private GameGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalGameParser createParser() {
		InternalGameParser result = new InternalGameParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEntityAccess().getAlternatives(), "rule__Entity__Alternatives");
					put(grammarAccess.getDynamicEntityAccess().getAlternatives(), "rule__DynamicEntity__Alternatives");
					put(grammarAccess.getStaticEntityAccess().getAlternatives(), "rule__StaticEntity__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getINTORDECAccess().getAlternatives(), "rule__INTORDEC__Alternatives");
					put(grammarAccess.getBehaviourAccess().getAlternatives(), "rule__Behaviour__Alternatives");
					put(grammarAccess.getTerminalExpressionAccess().getAlternatives(), "rule__TerminalExpression__Alternatives");
					put(grammarAccess.getReferenceCharacterAccess().getAlternatives(), "rule__ReferenceCharacter__Alternatives");
					put(grammarAccess.getCompOperatorAccess().getAlternatives(), "rule__CompOperator__Alternatives");
					put(grammarAccess.getCharDecAccess().getAlternatives(), "rule__CharDec__Alternatives");
					put(grammarAccess.getLogicOperatorAccess().getAlternatives(), "rule__LogicOperator__Alternatives");
					put(grammarAccess.getAttributeTypeAttackAccess().getAlternatives(), "rule__AttributeTypeAttack__Alternatives");
					put(grammarAccess.getLocationAccess().getAlternatives(), "rule__Location__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getGameMapAccess().getGroup(), "rule__GameMap__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getCharacterAccess().getGroup(), "rule__Character__Group__0");
					put(grammarAccess.getVECTORAccess().getGroup(), "rule__VECTOR__Group__0");
					put(grammarAccess.getObjectAccess().getGroup(), "rule__Object__Group__0");
					put(grammarAccess.getPathfindingAccess().getGroup(), "rule__Pathfinding__Group__0");
					put(grammarAccess.getBooleanExpressionAccess().getGroup(), "rule__BooleanExpression__Group__0");
					put(grammarAccess.getBooleanExpressionAccess().getGroup_4(), "rule__BooleanExpression__Group_4__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getTerminalExpressionAccess().getGroup_0(), "rule__TerminalExpression__Group_0__0");
					put(grammarAccess.getTerminalExpressionAccess().getGroup_1(), "rule__TerminalExpression__Group_1__0");
					put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
					put(grammarAccess.getConditionAccess().getGroup_5(), "rule__Condition__Group_5__0");
					put(grammarAccess.getDECIMALAccess().getGroup(), "rule__DECIMAL__Group__0");
					put(grammarAccess.getReferenceCharacterAccess().getGroup_0(), "rule__ReferenceCharacter__Group_0__0");
					put(grammarAccess.getReferenceCharacterAccess().getGroup_1(), "rule__ReferenceCharacter__Group_1__0");
					put(grammarAccess.getCompOperatorAccess().getGroup_0(), "rule__CompOperator__Group_0__0");
					put(grammarAccess.getCompOperatorAccess().getGroup_1(), "rule__CompOperator__Group_1__0");
					put(grammarAccess.getCompOperatorAccess().getGroup_2(), "rule__CompOperator__Group_2__0");
					put(grammarAccess.getCompOperatorAccess().getGroup_3(), "rule__CompOperator__Group_3__0");
					put(grammarAccess.getCompOperatorAccess().getGroup_4(), "rule__CompOperator__Group_4__0");
					put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
					put(grammarAccess.getActionAccess().getGroup_4(), "rule__Action__Group_4__0");
					put(grammarAccess.getCharacterAttrAccess().getGroup(), "rule__CharacterAttr__Group__0");
					put(grammarAccess.getLogicOperatorAccess().getGroup_0(), "rule__LogicOperator__Group_0__0");
					put(grammarAccess.getLogicOperatorAccess().getGroup_1(), "rule__LogicOperator__Group_1__0");
					put(grammarAccess.getLogicOperatorAccess().getGroup_2(), "rule__LogicOperator__Group_2__0");
					put(grammarAccess.getLogicOperatorAccess().getGroup_3(), "rule__LogicOperator__Group_3__0");
					put(grammarAccess.getAttackAccess().getGroup(), "rule__Attack__Group__0");
					put(grammarAccess.getAttributeAttackAccess().getGroup(), "rule__AttributeAttack__Group__0");
					put(grammarAccess.getAttributeTypeAttackAccess().getGroup_0(), "rule__AttributeTypeAttack__Group_0__0");
					put(grammarAccess.getAttributeTypeAttackAccess().getGroup_1(), "rule__AttributeTypeAttack__Group_1__0");
					put(grammarAccess.getAttributeTypeAttackAccess().getGroup_2(), "rule__AttributeTypeAttack__Group_2__0");
					put(grammarAccess.getBulletAccess().getGroup(), "rule__Bullet__Group__0");
					put(grammarAccess.getInitializerAccess().getGroup(), "rule__Initializer__Group__0");
					put(grammarAccess.getAttributeInitializerAccess().getGroup(), "rule__AttributeInitializer__Group__0");
					put(grammarAccess.getTargetRefAccess().getGroup(), "rule__TargetRef__Group__0");
					put(grammarAccess.getTargetRefAccess().getGroup_3(), "rule__TargetRef__Group_3__0");
					put(grammarAccess.getLocationAccess().getGroup_1(), "rule__Location__Group_1__0");
					put(grammarAccess.getModelAccess().getEntitiesAssignment_3(), "rule__Model__EntitiesAssignment_3");
					put(grammarAccess.getGameMapAccess().getEntityIdAssignment_0(), "rule__GameMap__EntityIdAssignment_0");
					put(grammarAccess.getGameMapAccess().getAttributeListAssignment_2(), "rule__GameMap__AttributeListAssignment_2");
					put(grammarAccess.getAttributeAccess().getAttributenameAssignment_1(), "rule__Attribute__AttributenameAssignment_1");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
					put(grammarAccess.getCharacterAccess().getEntityidAssignment_0(), "rule__Character__EntityidAssignment_0");
					put(grammarAccess.getCharacterAccess().getCharIdAssignment_1(), "rule__Character__CharIdAssignment_1");
					put(grammarAccess.getCharacterAccess().getNameAssignment_2(), "rule__Character__NameAssignment_2");
					put(grammarAccess.getCharacterAccess().getAttAssignment_4(), "rule__Character__AttAssignment_4");
					put(grammarAccess.getTypeAccess().getValueIdAssignment_0(), "rule__Type__ValueIdAssignment_0");
					put(grammarAccess.getTypeAccess().getValueIdAssignment_1(), "rule__Type__ValueIdAssignment_1");
					put(grammarAccess.getTypeAccess().getValueIdVecAssignment_2(), "rule__Type__ValueIdVecAssignment_2");
					put(grammarAccess.getVECTORAccess().getXValAssignment_0(), "rule__VECTOR__XValAssignment_0");
					put(grammarAccess.getVECTORAccess().getYValAssignment_1(), "rule__VECTOR__YValAssignment_1");
					put(grammarAccess.getCharTypeAccess().getCharTypeIdAssignment(), "rule__CharType__CharTypeIdAssignment");
					put(grammarAccess.getObjectAccess().getEntityidAssignment_0(), "rule__Object__EntityidAssignment_0");
					put(grammarAccess.getObjectAccess().getNameAssignment_1(), "rule__Object__NameAssignment_1");
					put(grammarAccess.getObjectAccess().getAttAssignment_3(), "rule__Object__AttAssignment_3");
					put(grammarAccess.getPathfindingAccess().getEntityidAssignment_0(), "rule__Pathfinding__EntityidAssignment_0");
					put(grammarAccess.getPathfindingAccess().getNameAssignment_1(), "rule__Pathfinding__NameAssignment_1");
					put(grammarAccess.getPathfindingAccess().getAttPathfindingAssignment_3(), "rule__Pathfinding__AttPathfindingAssignment_3");
					put(grammarAccess.getPathfindingAccess().getConditionsAssignment_4(), "rule__Pathfinding__ConditionsAssignment_4");
					put(grammarAccess.getBooleanExpressionAccess().getAttributeRefLeftAssignment_0(), "rule__BooleanExpression__AttributeRefLeftAssignment_0");
					put(grammarAccess.getBooleanExpressionAccess().getLeftExAssignment_1(), "rule__BooleanExpression__LeftExAssignment_1");
					put(grammarAccess.getBooleanExpressionAccess().getOperatorAssignment_2(), "rule__BooleanExpression__OperatorAssignment_2");
					put(grammarAccess.getBooleanExpressionAccess().getAttributeRefRightAssignment_3(), "rule__BooleanExpression__AttributeRefRightAssignment_3");
					put(grammarAccess.getBooleanExpressionAccess().getOpAssignment_4_0(), "rule__BooleanExpression__OpAssignment_4_0");
					put(grammarAccess.getBooleanExpressionAccess().getRightExAssignment_4_1(), "rule__BooleanExpression__RightExAssignment_4_1");
					put(grammarAccess.getExpressionAccess().getTmAssignment_0(), "rule__Expression__TmAssignment_0");
					put(grammarAccess.getExpressionAccess().getOpAssignment_1_1(), "rule__Expression__OpAssignment_1_1");
					put(grammarAccess.getExpressionAccess().getRightAssignment_1_2(), "rule__Expression__RightAssignment_1_2");
					put(grammarAccess.getTerminalExpressionAccess().getValueAssignment_1_1(), "rule__TerminalExpression__ValueAssignment_1_1");
					put(grammarAccess.getConditionAccess().getIfConditionAssignment_2(), "rule__Condition__IfConditionAssignment_2");
					put(grammarAccess.getConditionAccess().getThenAssignment_4(), "rule__Condition__ThenAssignment_4");
					put(grammarAccess.getConditionAccess().getElseIfConditionAssignment_5_1(), "rule__Condition__ElseIfConditionAssignment_5_1");
					put(grammarAccess.getReferenceCharacterAccess().getCharacterIdAssignment_0_1(), "rule__ReferenceCharacter__CharacterIdAssignment_0_1");
					put(grammarAccess.getReferenceCharacterAccess().getTargetIdAssignment_1_1(), "rule__ReferenceCharacter__TargetIdAssignment_1_1");
					put(grammarAccess.getCompOperatorAccess().getOpAssignment_0_1(), "rule__CompOperator__OpAssignment_0_1");
					put(grammarAccess.getCompOperatorAccess().getOpAssignment_1_1(), "rule__CompOperator__OpAssignment_1_1");
					put(grammarAccess.getCompOperatorAccess().getOpAssignment_2_1(), "rule__CompOperator__OpAssignment_2_1");
					put(grammarAccess.getCompOperatorAccess().getOpAssignment_3_1(), "rule__CompOperator__OpAssignment_3_1");
					put(grammarAccess.getCompOperatorAccess().getOpAssignment_4_1(), "rule__CompOperator__OpAssignment_4_1");
					put(grammarAccess.getActionAccess().getCharAttAssignment_1(), "rule__Action__CharAttAssignment_1");
					put(grammarAccess.getActionAccess().getCharDecAssignment_3(), "rule__Action__CharDecAssignment_3");
					put(grammarAccess.getActionAccess().getOpAssignment_4_0(), "rule__Action__OpAssignment_4_0");
					put(grammarAccess.getActionAccess().getExAssignment_4_1(), "rule__Action__ExAssignment_4_1");
					put(grammarAccess.getCharDecAccess().getCharAttResultAssignment_0(), "rule__CharDec__CharAttResultAssignment_0");
					put(grammarAccess.getCharDecAccess().getValAssignment_1(), "rule__CharDec__ValAssignment_1");
					put(grammarAccess.getCharacterAttrAccess().getReferenceAssignment_0(), "rule__CharacterAttr__ReferenceAssignment_0");
					put(grammarAccess.getCharacterAttrAccess().getAttributenameAssignment_1(), "rule__CharacterAttr__AttributenameAssignment_1");
					put(grammarAccess.getLogicOperatorAccess().getLopAssignment_0_1(), "rule__LogicOperator__LopAssignment_0_1");
					put(grammarAccess.getLogicOperatorAccess().getLopAssignment_1_1(), "rule__LogicOperator__LopAssignment_1_1");
					put(grammarAccess.getLogicOperatorAccess().getLopAssignment_2_1(), "rule__LogicOperator__LopAssignment_2_1");
					put(grammarAccess.getLogicOperatorAccess().getLopAssignment_3_1(), "rule__LogicOperator__LopAssignment_3_1");
					put(grammarAccess.getAttackAccess().getEntityidAssignment_0(), "rule__Attack__EntityidAssignment_0");
					put(grammarAccess.getAttackAccess().getNameAssignment_1(), "rule__Attack__NameAssignment_1");
					put(grammarAccess.getAttackAccess().getAttributesAssignment_3(), "rule__Attack__AttributesAssignment_3");
					put(grammarAccess.getAttackAccess().getAttributesAttackAssignment_4(), "rule__Attack__AttributesAttackAssignment_4");
					put(grammarAccess.getAttackAccess().getRulesAssignment_5(), "rule__Attack__RulesAssignment_5");
					put(grammarAccess.getAttributeAttackAccess().getAttributeTypesAttackAssignment_0(), "rule__AttributeAttack__AttributeTypesAttackAssignment_0");
					put(grammarAccess.getAttributeAttackAccess().getTypeAssignment_1(), "rule__AttributeAttack__TypeAssignment_1");
					put(grammarAccess.getAttributeTypeAttackAccess().getBulletRefAssignment_2_2(), "rule__AttributeTypeAttack__BulletRefAssignment_2_2");
					put(grammarAccess.getBulletAccess().getEntityidAssignment_0(), "rule__Bullet__EntityidAssignment_0");
					put(grammarAccess.getBulletAccess().getNameAssignment_1(), "rule__Bullet__NameAssignment_1");
					put(grammarAccess.getBulletAccess().getAttributesBulletAssignment_3(), "rule__Bullet__AttributesBulletAssignment_3");
					put(grammarAccess.getInitializerAccess().getEntityIdAssignment_1(), "rule__Initializer__EntityIdAssignment_1");
					put(grammarAccess.getInitializerAccess().getAttributesInitializerAssignment_3(), "rule__Initializer__AttributesInitializerAssignment_3");
					put(grammarAccess.getAttributeInitializerAccess().getAttributeIdAssignment_0(), "rule__AttributeInitializer__AttributeIdAssignment_0");
					put(grammarAccess.getAttributeInitializerAccess().getAmountValueIdAssignment_1(), "rule__AttributeInitializer__AmountValueIdAssignment_1");
					put(grammarAccess.getAttributeInitializerAccess().getTargetAssignment_2(), "rule__AttributeInitializer__TargetAssignment_2");
					put(grammarAccess.getTargetRefAccess().getTargetIdAssignment_0(), "rule__TargetRef__TargetIdAssignment_0");
					put(grammarAccess.getTargetRefAccess().getLocationsIdAssignment_2(), "rule__TargetRef__LocationsIdAssignment_2");
					put(grammarAccess.getTargetRefAccess().getLocationsIdAssignment_3_1(), "rule__TargetRef__LocationsIdAssignment_3_1");
					put(grammarAccess.getLocationAccess().getLocationIdAssignment_0(), "rule__Location__LocationIdAssignment_0");
					put(grammarAccess.getLocationAccess().getTypeaAssignment_1_1(), "rule__Location__TypeaAssignment_1_1");
					put(grammarAccess.getLocationAccess().getTypebAssignment_1_3(), "rule__Location__TypebAssignment_1_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalGameParser typedParser = (InternalGameParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GameGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GameGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
